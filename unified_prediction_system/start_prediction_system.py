#!/usr/bin/env python3
"""
Script de d√©marrage pour le syst√®me de pr√©diction unifi√©e NightScan

Ce script lance l'API de pr√©diction et peut optionnellement ouvrir l'interface web.
"""

import os
import sys
import time
import argparse
import logging
import webbrowser
from pathlib import Path
from threading import Thread

# Add parent directory to path for imports
sys.path.append(str(Path(__file__).parent.parent))

from unified_prediction_system.unified_prediction_api import UnifiedPredictionAPI


def check_dependencies():
    """V√©rifie les d√©pendances requises."""
    missing_deps = []
    
    try:
        import torch
    except ImportError:
        missing_deps.append("torch")
    
    try:
        import numpy
    except ImportError:
        missing_deps.append("numpy")
    
    try:
        import flask
    except ImportError:
        missing_deps.append("flask")
    
    try:
        import flask_cors
    except ImportError:
        missing_deps.append("flask-cors")
    
    try:
        import PIL
    except ImportError:
        missing_deps.append("pillow")
    
    if missing_deps:
        print("‚ùå D√©pendances manquantes:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print("\nInstallez les d√©pendances avec:")
        print(f"   pip install {' '.join(missing_deps)}")
        return False
    
    return True


def check_models():
    """V√©rifie la pr√©sence des mod√®les requis."""
    audio_model_path = Path("audio_training_efficientnet/models/best_model.pth")
    photo_model_path = Path("picture_training_enhanced/models/best_model.pth")
    
    models_status = {
        "audio": audio_model_path.exists(),
        "photo": photo_model_path.exists()
    }
    
    print("üìä √âtat des mod√®les:")
    print(f"   Audio: {'‚úÖ' if models_status['audio'] else '‚ùå'} {audio_model_path}")
    print(f"   Photo: {'‚úÖ' if models_status['photo'] else '‚ùå'} {photo_model_path}")
    
    if not any(models_status.values()):
        print("\n‚ö†Ô∏è  Aucun mod√®le trouv√©. Assurez-vous d'avoir entra√Æn√© au moins un mod√®le.")
        return False
    
    return True


def start_api_server(host, port, debug, config_path):
    """Lance le serveur API dans un thread s√©par√©."""
    try:
        api = UnifiedPredictionAPI(config_path, debug)
        api.run(host=host, port=port, debug=debug)
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage API: {e}")
        sys.exit(1)


def wait_for_api(host, port, timeout=30):
    """Attend que l'API soit disponible."""
    import requests
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"http://{host}:{port}/health", timeout=2)
            if response.status_code == 200:
                return True
        except:
            pass
        time.sleep(1)
    
    return False


def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(
        description="Syst√®me de pr√©diction unifi√©e NightScan",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python start_prediction_system.py                    # D√©marrage standard
  python start_prediction_system.py --debug           # Mode debug
  python start_prediction_system.py --no-browser      # Sans ouvrir le navigateur
  python start_prediction_system.py --port 8000       # Port personnalis√©
        """
    )
    
    parser.add_argument("--host", default="127.0.0.1", 
                       help="Adresse d'√©coute (d√©faut: 127.0.0.1)")
    parser.add_argument("--port", type=int, default=5000,
                       help="Port d'√©coute (d√©faut: 5000)")
    parser.add_argument("--debug", action="store_true",
                       help="Mode debug Flask")
    parser.add_argument("--no-browser", action="store_true",
                       help="Ne pas ouvrir automatiquement le navigateur")
    parser.add_argument("--config", type=Path,
                       help="Fichier de configuration des mod√®les")
    parser.add_argument("--check-only", action="store_true",
                       help="V√©rifier les d√©pendances et mod√®les seulement")
    
    args = parser.parse_args()
    
    # Configuration du logging
    log_level = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('prediction_system.log')
        ]
    )
    
    print("üåô NightScan - Syst√®me de Pr√©diction Unifi√©e")
    print("=" * 50)
    
    # V√©rifications pr√©alables
    print("\nüîç V√©rification des d√©pendances...")
    if not check_dependencies():
        sys.exit(1)
    print("‚úÖ Toutes les d√©pendances sont pr√©sentes")
    
    print("\nüîç V√©rification des mod√®les...")
    if not check_models():
        if not args.check_only:
            response = input("\nContinuer malgr√© les mod√®les manquants? (y/N): ")
            if response.lower() != 'y':
                sys.exit(1)
    
    if args.check_only:
        print("\n‚úÖ V√©rification termin√©e")
        return
    
    # Configuration
    web_interface_path = Path(__file__).parent / "web_interface.html"
    web_url = f"http://{args.host}:{args.port}"
    interface_url = f"file://{web_interface_path.absolute()}"
    
    print(f"\nüöÄ D√©marrage du syst√®me...")
    print(f"   API: {web_url}")
    print(f"   Interface: {interface_url}")
    print(f"   Mode debug: {args.debug}")
    print(f"   Logs: prediction_system.log")
    
    # D√©marrer l'API dans un thread s√©par√©
    api_thread = Thread(
        target=start_api_server,
        args=(args.host, args.port, args.debug, args.config),
        daemon=True
    )
    
    try:
        api_thread.start()
        
        # Attendre que l'API soit disponible
        print("\n‚è≥ Attente du d√©marrage de l'API...")
        if wait_for_api(args.host, args.port):
            print("‚úÖ API d√©marr√©e avec succ√®s")
            
            # Ouvrir le navigateur si demand√©
            if not args.no_browser:
                print("üåê Ouverture de l'interface web...")
                webbrowser.open(interface_url)
                print(f"üí° Interface accessible √†: {interface_url}")
            
            print(f"\nüéØ API disponible √†: {web_url}")
            print("üìö Documentation API:")
            print(f"   Health check: {web_url}/health")
            print(f"   Statut mod√®les: {web_url}/models/status")
            print(f"   Statistiques: {web_url}/stats")
            print(f"   Formats support√©s: {web_url}/supported-formats")
            
            print("\n‚ú® Syst√®me pr√™t ! Appuyez sur Ctrl+C pour arr√™ter.")
            
            # Garder le programme en vie
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n\nüõë Arr√™t du syst√®me...")
                
        else:
            print("‚ùå √âchec du d√©marrage de l'API")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t du syst√®me...")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)
    
    print("üëã Syst√®me arr√™t√©")


if __name__ == "__main__":
    main()