[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "nightscan"
dynamic = ["version"]
description = "NightScan - AI-powered wildlife detection system"
readme = "README.md"
requires-python = ">=3.9,<3.14"
license = {text = "MIT"}
authors = [
    {name = "NightScan Team", email = "contact@nightscan.example.com"},
]
keywords = ["ai", "wildlife", "detection", "machine-learning", "pytorch"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "torch==2.1.1",
    "torchvision==0.16.1",
    "numpy==1.24.3",
    "flask==2.3.3",
    "sqlalchemy==1.4.52",
    "redis==4.6.0",
    "celery==5.3.6",
    "pydantic==2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "ruff>=0.0.280",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
]
optimization = [
    "asyncpg>=0.28.0",
    "aioredis>=2.0.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "psutil>=5.9.0",
]
monitoring = [
    "prometheus-client>=0.15.0",
    "grafana-api>=1.0.0",
    "structlog>=22.0.0",
]
notifications = [
    "slack-sdk>=3.19.0",
    "python-telegram-bot>=20.0",
    "sendgrid>=6.9.0",
]

[project.urls]
Homepage = "https://github.com/GamerXtrem/NightScan"
Documentation = "https://github.com/GamerXtrem/NightScan/blob/main/README.md"
Repository = "https://github.com/GamerXtrem/NightScan"
"Bug Tracker" = "https://github.com/GamerXtrem/NightScan/issues"

[tool.setuptools_scm]
write_to = "nightscan/_version.py"

# Black configuration
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  ^/build/
  | ^/dist/
  | ^/\.venv/
  | ^/env/
  | ^/venv/
  | ^/\.mypy_cache/
  | ^/\.pytest_cache/
  | ^/node_modules/
  | wp-plugin/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "wp-plugin/*",
    "ios-app/*",
    "build/*",
    "dist/*",
    ".venv/*",
    "env/*",
    "venv/*",
]
known_first_party = ["nightscan"]
known_third_party = [
    "torch",
    "torchvision",
    "numpy",
    "flask",
    "sqlalchemy",
    "redis",
    "celery",
    "pydantic",
    "pytest",
]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "ARG002", # unused-method-argument
    "ARG003", # unused-class-method-argument
    "ARG004", # unused-static-method-argument
    "ARG005", # unused-lambda-argument
    "S",   # bandit (security)
    "N",   # pep8-naming
    "D",   # pydocstyle
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "S603",  # subprocess call: check for execution of untrusted input
    "S607",  # starting a process with a partial executable path
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "N806",  # variable in function should be lowercase (conflicts with ML conventions)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "wp-plugin",
    "ios-app",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D100", "D101", "D102", "D103"]  # Allow asserts and missing docstrings in tests
"audio_training/*" = ["N803", "N806"]  # Allow ML naming conventions
"picture_training/*" = ["N803", "N806"]  # Allow ML naming conventions
"audio_training_efficientnet/*" = ["N803", "N806"]  # Allow ML naming conventions
"picture_training_enhanced/*" = ["N803", "N806"]  # Allow ML naming conventions

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable this
disallow_incomplete_defs = false  # Gradually enable this
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Ignore missing imports for these modules
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "cv2.*",
    "PIL.*",
    "pydub.*",
    "librosa.*",
    "matplotlib.*",
    "seaborn.*",
    "sklearn.*",
    "scipy.*",
    "redis.*",
    "celery.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "ml: marks tests as machine learning tests",
    "api: marks tests as API tests",
    "database: marks tests that require database",
    "redis: marks tests that require Redis",
    "docker: marks tests that require Docker",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
]
python_files = ["tests.py", "test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = [".", "audio_training", "picture_training", "web", "nightscan_pi"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/*_test.py",
    "*/conftest.py",
    "setup.py",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "wp-plugin/*",
    "ios-app/*",
    "scripts/*",
    "k8s/*",
    "docker-compose*.yml",
    "Dockerfile*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
skip_covered = false
skip_empty = false
sort = "Cover"
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security configuration
[tool.bandit]
exclude_dirs = [
    "tests",
    "wp-plugin",
    "ios-app",
    "build",
    "dist",
    ".venv",
    "env",
    "venv",
]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
]

[tool.bandit.assert_used]
skips = ["*/tests/*", "*/*_test.py", "*/test_*.py"]
