apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets
  labels:
    name: external-secrets

---
# External Secrets Operator for secure secrets management
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: external-secrets
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.external-secrets.io
    chart: external-secrets
    targetRevision: 0.9.11
    helm:
      values: |
        installCRDs: true
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
  destination:
    server: https://kubernetes.default.svc
    namespace: external-secrets
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

---
# Secret Store for HashiCorp Vault
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: nightscan
spec:
  provider:
    vault:
      server: "${VAULT_ADDR}"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "nightscan-role"
          serviceAccountRef:
            name: "nightscan-vault-auth"

---
# Alternative: AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: nightscan
spec:
  provider:
    aws:
      service: SecretsManager
      region: "${AWS_REGION}"
      auth:
        serviceAccount:
          name: "nightscan-secrets-manager"

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-secret
  namespace: nightscan
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: postgres-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username | toString }}"
        password: "{{ .password | toString }}"
        database: "{{ .database | toString }}"
  data:
  - secretKey: username
    remoteRef:
      key: nightscan/postgres
      property: username
  - secretKey: password
    remoteRef:
      key: nightscan/postgres
      property: password
  - secretKey: database
    remoteRef:
      key: nightscan/postgres
      property: database

---
# External Secret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-secret
  namespace: nightscan
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: redis-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password | toString }}"
  data:
  - secretKey: password
    remoteRef:
      key: nightscan/redis
      property: password

---
# External Secret for Application Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-secret
  namespace: nightscan
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: app-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        secret-key: "{{ .secret_key | toString }}"
        csrf-secret-key: "{{ .csrf_secret_key | toString }}"
        jwt-secret: "{{ .jwt_secret | toString }}"
        encryption-key: "{{ .encryption_key | toString }}"
  data:
  - secretKey: secret_key
    remoteRef:
      key: nightscan/app
      property: secret_key
  - secretKey: csrf_secret_key
    remoteRef:
      key: nightscan/app
      property: csrf_secret_key
  - secretKey: jwt_secret
    remoteRef:
      key: nightscan/app
      property: jwt_secret
  - secretKey: encryption_key
    remoteRef:
      key: nightscan/app
      property: encryption_key

---
# External Secret for API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys
  namespace: nightscan
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: api-keys
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        aws-access-key-id: "{{ .aws_access_key_id | toString }}"
        aws-secret-access-key: "{{ .aws_secret_access_key | toString }}"
        openai-api-key: "{{ .openai_api_key | toString }}"
        slack-webhook-url: "{{ .slack_webhook_url | toString }}"
        smtp-password: "{{ .smtp_password | toString }}"
  data:
  - secretKey: aws_access_key_id
    remoteRef:
      key: nightscan/aws
      property: access_key_id
  - secretKey: aws_secret_access_key
    remoteRef:
      key: nightscan/aws
      property: secret_access_key
  - secretKey: openai_api_key
    remoteRef:
      key: nightscan/external-apis
      property: openai_api_key
  - secretKey: slack_webhook_url
    remoteRef:
      key: nightscan/notifications
      property: slack_webhook_url
  - secretKey: smtp_password
    remoteRef:
      key: nightscan/smtp
      property: password

---
# Service Account for Vault Authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nightscan-vault-auth
  namespace: nightscan
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/nightscan-vault-role"

---
# Service Account for AWS Secrets Manager
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nightscan-secrets-manager
  namespace: nightscan
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/nightscan-secrets-manager-role"