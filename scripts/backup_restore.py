#!/usr/bin/env python3
"""
Script restoration backups NightScan
Restoration compl√®te ou s√©lective des backups
"""

import os
import sys
import subprocess
import shutil
import tempfile
import gzip
import tarfile
import argparse
import json
from datetime import datetime, timedelta
from pathlib import Path

class NightScanRestore:
    """Gestionnaire restoration backups NightScan"""
    
    def __init__(self, backup_dir="/opt/nightscan/backups"):
        self.backup_dir = Path(backup_dir)
        self.temp_dir = None
        
    def list_available_backups(self):
        """Lister backups disponibles"""
        print("üîç BACKUPS DISPONIBLES")
        print("=" * 50)
        
        backups = {}
        
        # Backups quotidiens
        daily_dir = self.backup_dir / "daily"
        if daily_dir.exists():
            daily_backups = []
            for backup_file in daily_dir.glob("database_*.sql.gz"):
                timestamp = backup_file.stem.split("_")[1]
                date_obj = datetime.strptime(timestamp, "%Y%m%d_%H%M%S")
                daily_backups.append({
                    'timestamp': timestamp,
                    'date': date_obj,
                    'file': backup_file,
                    'type': 'daily'
                })
            
            daily_backups.sort(key=lambda x: x['date'], reverse=True)
            backups['daily'] = daily_backups[:10]  # 10 plus r√©cents
        
        # Backups hebdomadaires
        weekly_dir = self.backup_dir / "weekly"
        if weekly_dir.exists():
            weekly_backups = []
            for week_dir in weekly_dir.iterdir():
                if week_dir.is_dir():
                    db_file = week_dir / "database_*.sql.gz"
                    db_files = list(week_dir.glob("database_*.sql.gz"))
                    if db_files:
                        weekly_backups.append({
                            'week': week_dir.name,
                            'path': week_dir,
                            'type': 'weekly'
                        })
            
            backups['weekly'] = weekly_backups[-4:]  # 4 plus r√©cents
        
        # Backups mensuels
        monthly_dir = self.backup_dir / "monthly"
        if monthly_dir.exists():
            monthly_backups = []
            for month_dir in monthly_dir.iterdir():
                if month_dir.is_dir():
                    db_files = list(month_dir.glob("database_*.sql.gz"))
                    if db_files:
                        monthly_backups.append({
                            'month': month_dir.name,
                            'path': month_dir,
                            'type': 'monthly'
                        })
            
            backups['monthly'] = monthly_backups[-6:]  # 6 plus r√©cents
        
        # Affichage
        if 'daily' in backups:
            print("\nüìÖ BACKUPS QUOTIDIENS:")
            for i, backup in enumerate(backups['daily']):
                age = datetime.now() - backup['date']
                print(f"  {i+1:2d}. {backup['date'].strftime('%Y-%m-%d %H:%M')} "
                      f"({age.days} jours)")
        
        if 'weekly' in backups:
            print("\nüìÖ BACKUPS HEBDOMADAIRES:")
            for i, backup in enumerate(backups['weekly']):
                print(f"  {i+1:2d}. Semaine {backup['week']}")
        
        if 'monthly' in backups:
            print("\nüìÖ BACKUPS MENSUELS:")
            for i, backup in enumerate(backups['monthly']):
                print(f"  {i+1:2d}. Mois {backup['month']}")
        
        return backups
    
    def select_backup(self, backups, backup_type=None, index=None):
        """S√©lectionner backup √† restaurer"""
        if backup_type and index:
            # S√©lection automatique
            if backup_type in backups and index <= len(backups[backup_type]):
                return backups[backup_type][index - 1]
            else:
                raise ValueError(f"Backup {backup_type}#{index} non trouv√©")
        
        # S√©lection interactive
        print("\nüéØ S√âLECTION BACKUP")
        print("1. Quotidien")
        print("2. Hebdomadaire") 
        print("3. Mensuel")
        
        choice = input("Type de backup (1-3): ").strip()
        
        if choice == "1" and 'daily' in backups:
            print("\nBackups quotidiens:")
            for i, backup in enumerate(backups['daily']):
                print(f"  {i+1}. {backup['date'].strftime('%Y-%m-%d %H:%M')}")
            
            idx = int(input("Num√©ro du backup: ")) - 1
            return backups['daily'][idx]
            
        elif choice == "2" and 'weekly' in backups:
            print("\nBackups hebdomadaires:")
            for i, backup in enumerate(backups['weekly']):
                print(f"  {i+1}. Semaine {backup['week']}")
            
            idx = int(input("Num√©ro du backup: ")) - 1
            return backups['weekly'][idx]
            
        elif choice == "3" and 'monthly' in backups:
            print("\nBackups mensuels:")
            for i, backup in enumerate(backups['monthly']):
                print(f"  {i+1}. Mois {backup['month']}")
            
            idx = int(input("Num√©ro du backup: ")) - 1
            return backups['monthly'][idx]
        
        else:
            raise ValueError("S√©lection invalide")
    
    def prepare_restore_environment(self):
        """Pr√©parer environnement restoration"""
        print("üîß Pr√©paration environnement restoration...")
        
        # Cr√©er r√©pertoire temporaire
        self.temp_dir = Path(tempfile.mkdtemp(prefix="nightscan_restore_"))
        print(f"R√©pertoire temporaire: {self.temp_dir}")
        
        # V√©rifier services actifs
        active_services = []
        
        # V√©rifier PostgreSQL
        try:
            subprocess.run(['pg_isready'], check=True, capture_output=True)
            active_services.append('postgresql')
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è PostgreSQL non accessible")
        
        # V√©rifier Redis
        try:
            subprocess.run(['redis-cli', 'ping'], check=True, capture_output=True)
            active_services.append('redis')
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è Redis non accessible")
        
        print(f"Services actifs: {', '.join(active_services)}")
        return active_services
    
    def backup_current_state(self):
        """Backup √©tat actuel avant restoration"""
        print("üíæ Backup √©tat actuel avant restoration...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pre_restore_dir = self.backup_dir / f"pre_restore_{timestamp}"
        pre_restore_dir.mkdir(exist_ok=True)
        
        # Backup database actuelle
        try:
            db_backup = pre_restore_dir / "current_database.sql.gz"
            cmd = f"pg_dump {os.getenv('NIGHTSCAN_DATABASE_URI')} | gzip > {db_backup}"
            subprocess.run(cmd, shell=True, check=True)
            print(f"‚úÖ Database sauvegard√©e: {db_backup}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec backup database: {e}")
        
        # Backup Redis actuel
        try:
            redis_backup = pre_restore_dir / "current_redis.rdb"
            subprocess.run(['redis-cli', '--rdb', str(redis_backup)], check=True)
            print(f"‚úÖ Redis sauvegard√©: {redis_backup}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec backup Redis: {e}")
        
        return pre_restore_dir
    
    def restore_database(self, backup_info, target_db=None):
        """Restaurer base de donn√©es"""
        print("üóÑÔ∏è Restoration base de donn√©es...")
        
        # D√©terminer fichier backup
        if backup_info['type'] == 'daily':
            db_file = backup_info['file']
        else:
            # Chercher fichier database dans r√©pertoire
            db_files = list(backup_info['path'].glob("database_*.sql.gz"))
            if not db_files:
                raise FileNotFoundError("Fichier database non trouv√©")
            db_file = db_files[0]
        
        if not db_file.exists():
            raise FileNotFoundError(f"Backup database non trouv√©: {db_file}")
        
        # Base donn√©es cible
        if not target_db:
            target_db = os.getenv('NIGHTSCAN_DATABASE_URI')
            if not target_db:
                raise ValueError("NIGHTSCAN_DATABASE_URI non d√©fini")
        
        print(f"Fichier backup: {db_file}")
        print(f"Base cible: {target_db.split('@')[-1] if '@' in target_db else target_db}")
        
        # Confirmation
        confirm = input("Confirmer restoration database? (oui/non): ").strip().lower()
        if confirm not in ['oui', 'o', 'yes', 'y']:
            print("Restoration annul√©e")
            return False
        
        try:
            # Extraction et restoration
            print("Extraction et restoration en cours...")
            cmd = f"zcat {db_file} | psql {target_db}"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Database restaur√©e avec succ√®s")
                return True
            else:
                print(f"‚ùå √âchec restoration database:")
                print(result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur restoration database: {e}")
            return False
    
    def restore_redis(self, backup_info):
        """Restaurer Redis"""
        print("üíæ Restoration Redis...")
        
        # D√©terminer fichier backup
        if backup_info['type'] == 'daily':
            backup_dir = backup_info['file'].parent
        else:
            backup_dir = backup_info['path']
        
        redis_files = list(backup_dir.glob("redis_*.rdb.gz"))
        if not redis_files:
            print("‚ö†Ô∏è Backup Redis non trouv√©")
            return False
        
        redis_file = redis_files[0]
        print(f"Fichier backup Redis: {redis_file}")
        
        # Confirmation
        confirm = input("Confirmer restoration Redis? (oui/non): ").strip().lower()
        if confirm not in ['oui', 'o', 'yes', 'y']:
            print("Restoration Redis annul√©e")
            return False
        
        try:
            # Arr√™ter Redis temporairement
            print("Arr√™t Redis...")
            subprocess.run(['redis-cli', 'SHUTDOWN', 'NOSAVE'], check=False)
            
            # D√©compresser et copier RDB
            with gzip.open(redis_file, 'rb') as f_in:
                with open('/var/lib/redis/dump.rdb', 'wb') as f_out:
                    shutil.copyfileobj(f_in, f_out)
            
            # Red√©marrer Redis
            print("Red√©marrage Redis...")
            subprocess.run(['systemctl', 'start', 'redis'], check=True)
            
            # V√©rifier
            subprocess.run(['redis-cli', 'ping'], check=True)
            print("‚úÖ Redis restaur√© avec succ√®s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur restoration Redis: {e}")
            # Red√©marrer Redis en cas d'√©chec
            subprocess.run(['systemctl', 'start', 'redis'], check=False)
            return False
    
    def restore_user_data(self, backup_info, target_dir="/opt/nightscan"):
        """Restaurer donn√©es utilisateur"""
        print("üìÅ Restoration donn√©es utilisateur...")
        
        # D√©terminer fichier backup
        if backup_info['type'] == 'daily':
            backup_dir = backup_info['file'].parent
        else:
            backup_dir = backup_info['path']
        
        data_files = list(backup_dir.glob("user_data_*.tar.gz"))
        if not data_files:
            print("‚ö†Ô∏è Backup donn√©es utilisateur non trouv√©")
            return False
        
        data_file = data_files[0]
        print(f"Fichier backup: {data_file}")
        
        # Confirmation
        confirm = input("Confirmer restoration donn√©es utilisateur? (oui/non): ").strip().lower()
        if confirm not in ['oui', 'o', 'yes', 'y']:
            print("Restoration donn√©es annul√©e")
            return False
        
        try:
            # Backup r√©pertoires existants
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_existing = Path(f"/tmp/nightscan_existing_{timestamp}")
            
            for subdir in ['uploads', 'models', 'config']:
                src = Path(target_dir) / subdir
                if src.exists():
                    dst = backup_existing / subdir
                    dst.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copytree(src, dst)
            
            print(f"Donn√©es existantes sauvegard√©es dans: {backup_existing}")
            
            # Extraction
            print("Extraction donn√©es utilisateur...")
            with tarfile.open(data_file, 'r:gz') as tar:
                tar.extractall(path='/')
            
            print("‚úÖ Donn√©es utilisateur restaur√©es")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur restoration donn√©es: {e}")
            return False
    
    def restore_system_config(self, backup_info):
        """Restaurer configuration syst√®me"""
        print("‚öôÔ∏è Restoration configuration syst√®me...")
        
        # D√©terminer fichier backup
        if backup_info['type'] == 'daily':
            backup_dir = backup_info['file'].parent
        else:
            backup_dir = backup_info['path']
        
        config_files = list(backup_dir.glob("system_config_*.tar.gz"))
        if not config_files:
            print("‚ö†Ô∏è Backup configuration syst√®me non trouv√©")
            return False
        
        config_file = config_files[0]
        print(f"Fichier backup: {config_file}")
        
        # Confirmation (critique)
        print("‚ö†Ô∏è ATTENTION: Restoration configuration syst√®me critique")
        confirm = input("Confirmer restoration config syst√®me? (oui/non): ").strip().lower()
        if confirm not in ['oui', 'o', 'yes', 'y']:
            print("Restoration configuration annul√©e")
            return False
        
        try:
            # Extraction avec pr√©caution
            print("Extraction configuration syst√®me...")
            with tarfile.open(config_file, 'r:gz') as tar:
                # Lister contenu avant extraction
                members = tar.getmembers()
                print("Fichiers √† restaurer:")
                for member in members:
                    print(f"  {member.name}")
                
                # Confirmation finale
                final_confirm = input("Proc√©der √† l'extraction? (oui/non): ").strip().lower()
                if final_confirm in ['oui', 'o', 'yes', 'y']:
                    tar.extractall(path='/')
                    print("‚úÖ Configuration syst√®me restaur√©e")
                    print("‚ö†Ô∏è Red√©marrage services requis")
                    return True
                else:
                    print("Extraction annul√©e")
                    return False
            
        except Exception as e:
            print(f"‚ùå Erreur restoration config: {e}")
            return False
    
    def verify_restoration(self):
        """V√©rifier restoration"""
        print("üîç V√©rification restoration...")
        
        checks = []
        
        # Test connexion database
        try:
            db_uri = os.getenv('NIGHTSCAN_DATABASE_URI')
            if db_uri:
                import psycopg2
                conn = psycopg2.connect(db_uri)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM information_schema.tables")
                table_count = cursor.fetchone()[0]
                cursor.close()
                conn.close()
                checks.append(f"‚úÖ Database: {table_count} tables")
            else:
                checks.append("‚ö†Ô∏è Database: URI non d√©fini")
        except Exception as e:
            checks.append(f"‚ùå Database: {e}")
        
        # Test Redis
        try:
            import redis
            r = redis.from_url(os.getenv('REDIS_URL', 'redis://localhost:6379'))
            info = r.info()
            checks.append(f"‚úÖ Redis: {info.get('used_memory_human', 'OK')}")
        except Exception as e:
            checks.append(f"‚ùå Redis: {e}")
        
        # Test fichiers
        critical_files = [
            '/opt/nightscan/config/current.json',
            '/opt/nightscan/unified_config.py',
            '/opt/nightscan/web/app.py'
        ]
        
        for file_path in critical_files:
            if Path(file_path).exists():
                checks.append(f"‚úÖ Fichier: {file_path}")
            else:
                checks.append(f"‚ùå Fichier manquant: {file_path}")
        
        print("\nR√©sultats v√©rification:")
        for check in checks:
            print(f"  {check}")
        
        # Score global
        success_count = sum(1 for check in checks if check.startswith("‚úÖ"))
        total_count = len(checks)
        score = (success_count / total_count) * 100
        
        print(f"\nüìä Score restoration: {score:.1f}% ({success_count}/{total_count})")
        
        return score >= 80
    
    def cleanup_temp_files(self):
        """Nettoyage fichiers temporaires"""
        if self.temp_dir and self.temp_dir.exists():
            shutil.rmtree(self.temp_dir)
            print(f"üßπ Nettoyage: {self.temp_dir}")

def main():
    parser = argparse.ArgumentParser(description='Restoration backups NightScan')
    parser.add_argument('--list', action='store_true', 
                       help='Lister backups disponibles')
    parser.add_argument('--type', choices=['daily', 'weekly', 'monthly'],
                       help='Type de backup √† restaurer')
    parser.add_argument('--index', type=int,
                       help='Index du backup √† restaurer')
    parser.add_argument('--database-only', action='store_true',
                       help='Restaurer seulement la database')
    parser.add_argument('--redis-only', action='store_true',
                       help='Restaurer seulement Redis')
    parser.add_argument('--data-only', action='store_true',
                       help='Restaurer seulement les donn√©es utilisateur')
    parser.add_argument('--target-db', 
                       help='Base de donn√©es cible pour restoration')
    parser.add_argument('--dry-run', action='store_true',
                       help='Simulation sans modifications r√©elles')
    
    args = parser.parse_args()
    
    restore = NightScanRestore()
    
    try:
        # Lister backups
        backups = restore.list_available_backups()
        
        if args.list:
            return 0
        
        if not any(backups.values()):
            print("‚ùå Aucun backup disponible")
            return 1
        
        # S√©lectionner backup
        selected_backup = restore.select_backup(backups, args.type, args.index)
        
        print(f"\nüéØ BACKUP S√âLECTIONN√â:")
        if selected_backup['type'] == 'daily':
            print(f"   Date: {selected_backup['date'].strftime('%Y-%m-%d %H:%M')}")
        else:
            print(f"   P√©riode: {selected_backup.get('week', selected_backup.get('month'))}")
        print(f"   Type: {selected_backup['type']}")
        
        if args.dry_run:
            print("\nüîç MODE SIMULATION - Aucune modification")
            return 0
        
        # Pr√©paration
        restore.prepare_restore_environment()
        pre_restore_backup = restore.backup_current_state()
        
        print(f"\nüíæ Backup pr√©-restoration: {pre_restore_backup}")
        
        # Restoration s√©lective ou compl√®te
        success = True
        
        if args.database_only:
            success = restore.restore_database(selected_backup, args.target_db)
        elif args.redis_only:
            success = restore.restore_redis(selected_backup)
        elif args.data_only:
            success = restore.restore_user_data(selected_backup)
        else:
            # Restoration compl√®te
            print("\nüöÄ RESTORATION COMPL√àTE")
            print("=" * 50)
            
            success &= restore.restore_database(selected_backup, args.target_db)
            success &= restore.restore_redis(selected_backup)
            success &= restore.restore_user_data(selected_backup)
            
            # Configuration syst√®me optionnelle
            config_confirm = input("\nRestaurer configuration syst√®me? (oui/non): ").strip().lower()
            if config_confirm in ['oui', 'o', 'yes', 'y']:
                success &= restore.restore_system_config(selected_backup)
        
        # V√©rification
        if success:
            print("\nüîç V√âRIFICATION FINALE")
            print("=" * 50)
            verification_ok = restore.verify_restoration()
            
            if verification_ok:
                print("\nüéâ RESTORATION R√âUSSIE!")
                print("Red√©marrage des services recommand√©")
            else:
                print("\n‚ö†Ô∏è RESTORATION PARTIELLE")
                print("V√©rification manuelle requise")
        else:
            print("\n‚ùå √âCHEC RESTORATION")
            print(f"Backup pr√©-restoration disponible: {pre_restore_backup}")
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Restoration interrompue")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erreur restoration: {e}")
        return 1
    finally:
        restore.cleanup_temp_files()

if __name__ == '__main__':
    sys.exit(main())