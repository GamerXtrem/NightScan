#!/usr/bin/env python3
"""
Script pour cr√©er un mod√®le ML temporaire pour tests
Ce mod√®le permet de tester l'infrastructure sans donn√©es r√©elles
"""

import torch
import torch.nn as nn
import json
from pathlib import Path
import os

def create_mock_model():
    """Cr√©er un mod√®le ResNet18 simplifi√© pour tests"""
    
    # Architecture similaire au mod√®le r√©el mais simplifi√©e
    class MockWildlifeClassifier(nn.Module):
        def __init__(self, num_classes=6):
            super(MockWildlifeClassifier, self).__init__()
            
            # Couches convolutionnelles simplifi√©es
            self.features = nn.Sequential(
                nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3),
                nn.ReLU(inplace=True),
                nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
                
                nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),
                nn.ReLU(inplace=True),
                nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
                
                nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1),
                nn.ReLU(inplace=True),
                nn.AdaptiveAvgPool2d((1, 1))
            )
            
            # Classificateur
            self.classifier = nn.Sequential(
                nn.Dropout(0.5),
                nn.Linear(256, 128),
                nn.ReLU(inplace=True),
                nn.Dropout(0.3),
                nn.Linear(128, num_classes)
            )
            
        def forward(self, x):
            x = self.features(x)
            x = torch.flatten(x, 1)
            x = self.classifier(x)
            return x
    
    return MockWildlifeClassifier()

def create_mock_weights(model, project_root):
    """Cr√©er des poids pr√©-entra√Æn√©s simul√©s"""
    
    models_dir = Path(project_root) / "models"
    models_dir.mkdir(exist_ok=True)
    
    # Initialiser avec des poids Xavier/Glorot
    for module in model.modules():
        if isinstance(module, nn.Conv2d):
            nn.init.xavier_uniform_(module.weight)
            if module.bias is not None:
                nn.init.constant_(module.bias, 0)
        elif isinstance(module, nn.Linear):
            nn.init.xavier_uniform_(module.weight)
            nn.init.constant_(module.bias, 0)
    
    # Simuler un mod√®le "entra√Æn√©" avec performance raisonnable
    model_state = {
        'model_state_dict': model.state_dict(),
        'optimizer_state_dict': {},  # Pas besoin pour inference
        'epoch': 100,
        'loss': 0.234,
        'accuracy': 0.892,
        'val_accuracy': 0.856,
        'training_time_hours': 24.5,
        'model_version': '1.0.0-mock',
        'pytorch_version': torch.__version__,
        'creation_date': '2024-07-06',
        'is_mock_model': True,
        'description': 'Mock model for infrastructure testing - NOT for production use'
    }
    
    # Sauvegarder le mod√®le
    model_path = models_dir / "best_model.pth"
    torch.save(model_state, model_path)
    
    print(f"‚úÖ Mod√®le mock cr√©√©: {model_path}")
    return model_path

def create_metadata(project_root):
    """Cr√©er m√©tadonn√©es du mod√®le"""
    
    metadata = {
        "model_info": {
            "name": "wildlife_audio_classifier_mock",
            "version": "1.0.0-mock",
            "architecture": "ResNet18-simplified",
            "framework": "PyTorch",
            "creation_date": "2024-07-06",
            "is_mock": True
        },
        "training_info": {
            "dataset_size": "simulated",
            "training_epochs": 100,
            "batch_size": 32,
            "learning_rate": 0.001,
            "optimizer": "Adam",
            "loss_function": "CrossEntropyLoss",
            "final_accuracy": 0.892,
            "validation_accuracy": 0.856
        },
        "input_specs": {
            "input_shape": [3, 224, 224],
            "input_type": "spectrogram_image",
            "preprocessing": "normalize_imagenet",
            "sample_rate": 22050,
            "n_fft": 2048,
            "hop_length": 512
        },
        "output_specs": {
            "num_classes": 6,
            "output_type": "logits",
            "confidence_threshold": 0.7
        },
        "performance": {
            "inference_time_ms": 45,
            "memory_usage_mb": 150,
            "cpu_optimized": True,
            "gpu_compatible": True
        },
        "warning": "‚ö†Ô∏è This is a MOCK model for testing infrastructure only. Do NOT use in production!"
    }
    
    metadata_path = Path(project_root) / "models" / "metadata.json"
    with open(metadata_path, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ M√©tadonn√©es cr√©√©es: {metadata_path}")
    return metadata_path

def create_mock_training_data(project_root):
    """Cr√©er des fichiers CSV de donn√©es d'entra√Ænement simul√©es"""
    
    data_dir = Path(project_root) / "data" / "processed" / "csv"
    data_dir.mkdir(parents=True, exist_ok=True)
    
    # Labels disponibles
    labels = ["bird_song", "mammal_call", "insect_sound", "amphibian_call", "environmental_sound", "unknown_species"]
    
    # Cr√©er train.csv
    train_data = []
    for i in range(1000):  # 1000 √©chantillons simul√©s
        label = labels[i % len(labels)]
        filename = f"mock_audio_{i:04d}.wav"
        train_data.append(f"{filename},{label}")
    
    train_path = data_dir / "train.csv"
    with open(train_path, 'w') as f:
        f.write("filename,label\n")
        f.write("\n".join(train_data))
    
    # Cr√©er val.csv
    val_data = []
    for i in range(200):  # 200 √©chantillons validation
        label = labels[i % len(labels)]
        filename = f"mock_val_{i:04d}.wav"
        val_data.append(f"{filename},{label}")
    
    val_path = data_dir / "val.csv"
    with open(val_path, 'w') as f:
        f.write("filename,label\n")
        f.write("\n".join(val_data))
    
    # Cr√©er test.csv
    test_data = []
    for i in range(100):  # 100 √©chantillons test
        label = labels[i % len(labels)]
        filename = f"mock_test_{i:04d}.wav"
        test_data.append(f"{filename},{label}")
    
    test_path = data_dir / "test.csv"
    with open(test_path, 'w') as f:
        f.write("filename,label\n")
        f.write("\n".join(test_data))
    
    print(f"‚úÖ Donn√©es d'entra√Ænement simul√©es cr√©√©es:")
    print(f"   - Train: {train_path} (1000 √©chantillons)")
    print(f"   - Validation: {val_path} (200 √©chantillons)")
    print(f"   - Test: {test_path} (100 √©chantillons)")

def main():
    """Fonction principale"""
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    print("üîß Cr√©ation d'un mod√®le ML mock pour tests d'infrastructure...")
    print("‚ö†Ô∏è  ATTENTION: Ce mod√®le est uniquement pour tester l'infrastructure!")
    print("‚ö†Ô∏è  NE PAS utiliser en production - cr√©er un vrai mod√®le entra√Æn√©!")
    print()
    
    # Cr√©er le mod√®le
    model = create_mock_model()
    print(f"üìê Architecture mod√®le: {sum(p.numel() for p in model.parameters())} param√®tres")
    
    # Cr√©er les poids
    model_path = create_mock_weights(model, project_root)
    
    # Cr√©er m√©tadonn√©es
    metadata_path = create_metadata(project_root)
    
    # Cr√©er donn√©es d'entra√Ænement simul√©es
    create_mock_training_data(project_root)
    
    print()
    print("‚úÖ Mod√®le mock cr√©√© avec succ√®s!")
    print()
    print("üìã Fichiers cr√©√©s:")
    print(f"   - models/best_model.pth (mod√®le PyTorch)")
    print(f"   - models/metadata.json (m√©tadonn√©es)")
    print(f"   - models/labels.json (labels des classes)")
    print(f"   - data/processed/csv/*.csv (donn√©es simul√©es)")
    print()
    print("üöÄ L'API peut maintenant d√©marrer pour tests d'infrastructure!")
    print()
    print("‚ö†Ô∏è  PROCHAINES √âTAPES POUR PRODUCTION:")
    print("   1. Collecter vraies donn√©es audio wildlife")
    print("   2. Entra√Æner mod√®le avec vraies donn√©es")
    print("   3. Remplacer best_model.pth par mod√®le r√©el")
    print("   4. Mettre √† jour labels.json avec vraies esp√®ces")

if __name__ == "__main__":
    main()