#!/bin/bash

# Script de configuration firewall UFW + fail2ban pour NightScan VPS Lite
# S√©curit√© r√©seau optimis√©e pour VPS Lite
# Usage: ./setup-firewall.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log "üî• Configuration firewall UFW + fail2ban pour NightScan VPS Lite"
log "================================================================"

# V√©rifier les privil√®ges root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        error "Ce script doit √™tre ex√©cut√© en tant que root"
        error "Utilisez: sudo $0"
        exit 1
    fi
    success "Privil√®ges root v√©rifi√©s"
}

# Installer UFW et fail2ban
install_security_packages() {
    log "üì¶ Installation UFW et fail2ban..."
    
    # Mise √† jour des paquets
    apt-get update -qq
    
    # Installation des paquets de s√©curit√©
    apt-get install -y ufw fail2ban
    
    success "Paquets de s√©curit√© install√©s"
}

# Configurer UFW (Uncomplicated Firewall)
configure_ufw() {
    log "üî• Configuration UFW..."
    
    # Reset UFW pour partir d'une base propre
    ufw --force reset
    
    # Politique par d√©faut : deny all incoming, allow outgoing
    ufw default deny incoming
    ufw default allow outgoing
    
    # Autoriser SSH (IMPORTANT: avant d'activer UFW)
    ufw allow ssh
    ufw allow 22/tcp
    
    # Autoriser HTTP et HTTPS (Nginx)
    ufw allow 80/tcp
    ufw allow 443/tcp
    
    # Autoriser monitoring Grafana (acc√®s restreint par Nginx auth)
    ufw allow 3000/tcp
    
    # R√®gles sp√©cifiques pour Docker (si n√©cessaire)
    # ufw allow from 172.16.0.0/12 to any port 5432  # PostgreSQL interne
    # ufw allow from 172.16.0.0/12 to any port 6379  # Redis interne
    
    # Limiter les connexions SSH (protection brute force)
    ufw limit ssh/tcp
    
    # R√®gles avanc√©es pour NightScan
    
    # Bloquer les ports sensibles de l'ext√©rieur
    ufw deny 5432/tcp  # PostgreSQL
    ufw deny 6379/tcp  # Redis
    ufw deny 3100/tcp  # Loki
    ufw deny 9080/tcp  # Promtail
    
    # Autoriser ping (ICMP) mais limit√©
    ufw allow in on lo
    ufw allow out on lo
    
    # Activer UFW
    ufw --force enable
    
    success "UFW configur√© et activ√©"
}

# Configurer fail2ban
configure_fail2ban() {
    log "üõ°Ô∏è  Configuration fail2ban..."
    
    # Cr√©er configuration personnalis√©e fail2ban
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
# Configuration fail2ban pour NightScan VPS Lite
ignoreip = 127.0.0.1/8 ::1
bantime = 3600
findtime = 600
maxretry = 3
backend = auto
usedns = warn
logencoding = auto
enabled = false
filter = %(__name__)s
destemail = root@localhost
sender = root@$(hostname -f)
mta = sendmail
protocol = tcp
chain = <known/chain>

# Actions
action_ = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s"]
action_mw = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s"]
           %(mta)s-whois[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", protocol="%(protocol)s", chain="%(chain)s"]
action_mwl = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s"]
            %(mta)s-whois-lines[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", logpath="%(logpath)s", chain="%(chain)s"]
action_xarf = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s"]
             xarf-login-attack[service=%(__name__)s, sender="%(sender)s", logpath="%(logpath)s", port="%(port)s"]
action = %(action_)s

# Jail SSH (protection connexions SSH)
[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s
maxretry = 3
bantime = 3600

# Jail Nginx (protection attaques web)
[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600

[nginx-limit-req]
enabled = true
filter = nginx-limit-req
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600

[nginx-botsearch]
enabled = true
filter = nginx-botsearch
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 7200

# Jail Docker (si activ√©)
[docker-auth]
enabled = false
filter = docker-auth
port = 2376
logpath = /var/log/docker.log
maxretry = 3
bantime = 3600

# Protection NightScan sp√©cifique
[nightscan-auth]
enabled = true
filter = nightscan-auth
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 5
findtime = 300
bantime = 1800
EOF

    # Cr√©er filtres personnalis√©s pour NightScan
    cat > /etc/fail2ban/filter.d/nightscan-auth.conf << EOF
# Filtre fail2ban pour authentification NightScan
[Definition]
failregex = ^<HOST> -.*"POST /(login|api/auth).*" (401|403|422)
            ^<HOST> -.*"POST /api/.*" 401
ignoreregex = 
EOF

    # Red√©marrer et activer fail2ban
    systemctl restart fail2ban
    systemctl enable fail2ban
    
    success "fail2ban configur√© et activ√©"
}

# Configurer les logs de s√©curit√©
setup_security_logging() {
    log "üìù Configuration logs de s√©curit√©..."
    
    # Cr√©er r√©pertoire logs s√©curit√©
    mkdir -p /var/log/nightscan-security
    
    # Configuration logrotate pour logs s√©curit√©
    cat > /etc/logrotate.d/nightscan-security << EOF
/var/log/nightscan-security/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 root root
    postrotate
        systemctl reload fail2ban > /dev/null 2>&1 || true
    endscript
}
EOF

    # Script de monitoring s√©curit√©
    cat > /usr/local/bin/nightscan-security-monitor.sh << 'EOF'
#!/bin/bash
# Monitoring s√©curit√© automatique pour NightScan

LOG_FILE="/var/log/nightscan-security/security-monitor.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# Fonction de log
log_security() {
    echo "[$DATE] $1" >> "$LOG_FILE"
}

# V√©rifier le statut fail2ban
if ! systemctl is-active --quiet fail2ban; then
    log_security "ALERT: fail2ban service down"
    systemctl restart fail2ban
fi

# V√©rifier le statut UFW
if ! ufw status | grep -q "Status: active"; then
    log_security "ALERT: UFW firewall inactive"
fi

# Compter les IPs bannies
BANNED_IPS=$(fail2ban-client status sshd 2>/dev/null | grep "Banned IP list" | wc -l)
if [ "$BANNED_IPS" -gt 0 ]; then
    log_security "INFO: $BANNED_IPS IPs currently banned"
fi

# V√©rifier les connexions suspectes
SUSPICIOUS_CONNECTIONS=$(ss -tn | grep ":22\|:80\|:443" | wc -l)
if [ "$SUSPICIOUS_CONNECTIONS" -gt 50 ]; then
    log_security "WARNING: High number of connections ($SUSPICIOUS_CONNECTIONS)"
fi

# V√©rifier l'utilisation disque
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 80 ]; then
    log_security "WARNING: Disk usage high ($DISK_USAGE%)"
fi

# V√©rifier la charge syst√®me
LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
if (( $(echo "$LOAD_AVG > 2.0" | bc -l) )); then
    log_security "WARNING: High system load ($LOAD_AVG)"
fi
EOF

    chmod +x /usr/local/bin/nightscan-security-monitor.sh
    
    # Cr√©er cron job pour monitoring s√©curit√©
    cat > /etc/cron.d/nightscan-security << EOF
# Monitoring s√©curit√© NightScan - toutes les 15 minutes
*/15 * * * * root /usr/local/bin/nightscan-security-monitor.sh
EOF

    success "Logs de s√©curit√© configur√©s"
}

# Cr√©er r√®gles de s√©curit√© avanc√©es
create_advanced_security_rules() {
    log "üîí Configuration r√®gles s√©curit√© avanc√©es..."
    
    # Script de blocage d'IPs malveillantes
    cat > /usr/local/bin/block-malicious-ips.sh << 'EOF'
#!/bin/bash
# Blocage automatique d'IPs malveillantes pour NightScan

# Listes d'IPs malveillantes connues
MALICIOUS_LISTS=(
    "https://www.spamhaus.org/drop/drop.txt"
    "https://www.spamhaus.org/drop/edrop.txt"
)

# T√©l√©charger et appliquer les listes
for list in "${MALICIOUS_LISTS[@]}"; do
    echo "T√©l√©chargement: $list"
    curl -s "$list" | grep -E '^[0-9]' | cut -d' ' -f1 | while read -r ip; do
        if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$ ]]; then
            ufw deny from "$ip" > /dev/null 2>&1
        fi
    done
done

echo "Blocage IPs malveillantes mis √† jour"
EOF

    chmod +x /usr/local/bin/block-malicious-ips.sh
    
    # Ex√©cuter une fois au d√©marrage
    # /usr/local/bin/block-malicious-ips.sh
    
    success "R√®gles s√©curit√© avanc√©es cr√©√©es"
}

# Test de la configuration firewall
test_firewall_configuration() {
    log "üîç Test de la configuration firewall..."
    
    # Test statut UFW
    if ufw status | grep -q "Status: active"; then
        success "UFW est actif"
    else
        error "UFW n'est pas actif"
    fi
    
    # Test statut fail2ban
    if systemctl is-active --quiet fail2ban; then
        success "fail2ban est actif"
    else
        error "fail2ban n'est pas actif"
    fi
    
    # Afficher les r√®gles UFW
    echo ""
    log "R√®gles UFW actives:"
    ufw status numbered
    
    # Afficher les jails fail2ban
    echo ""
    log "Jails fail2ban actives:"
    fail2ban-client status
    
    success "Configuration firewall test√©e"
}

# Afficher les informations finales
show_firewall_info() {
    log "üî• Configuration firewall termin√©e"
    echo ""
    echo "üõ°Ô∏è  S√©curit√© r√©seau activ√©e:"
    echo "  ‚úÖ UFW (Uncomplicated Firewall)"
    echo "  ‚úÖ fail2ban (Protection brute force)"
    echo "  ‚úÖ Monitoring s√©curit√© automatique"
    echo ""
    echo "üö™ Ports autoris√©s:"
    echo "  - 22/tcp (SSH) - Limit√©"
    echo "  - 80/tcp (HTTP) - Redirig√© vers HTTPS"
    echo "  - 443/tcp (HTTPS) - NightScan App"
    echo "  - 3000/tcp (Grafana) - Prot√©g√© par auth"
    echo ""
    echo "üö´ Ports bloqu√©s:"
    echo "  - 5432/tcp (PostgreSQL)"
    echo "  - 6379/tcp (Redis)"
    echo "  - 3100/tcp (Loki)"
    echo "  - Tous les autres ports"
    echo ""
    echo "‚öôÔ∏è  Commandes utiles:"
    echo "  - Status UFW: ufw status"
    echo "  - Status fail2ban: fail2ban-client status"
    echo "  - IPs bannies SSH: fail2ban-client status sshd"
    echo "  - Logs s√©curit√©: tail -f /var/log/nightscan-security/security-monitor.log"
    echo "  - D√©bannir IP: fail2ban-client unban <IP>"
    echo ""
    echo "üìä Monitoring:"
    echo "  - Monitoring automatique toutes les 15 minutes"
    echo "  - Logs dans /var/log/nightscan-security/"
    echo "  - Alertes syst√®me en cas de probl√®me"
}

# Fonction principale
main() {
    check_root
    install_security_packages
    configure_ufw
    configure_fail2ban
    setup_security_logging
    create_advanced_security_rules
    test_firewall_configuration
    show_firewall_info
    
    success "üéâ Firewall UFW + fail2ban configur√© avec succ√®s!"
    echo ""
    warn "‚ö†Ô∏è  IMPORTANT:"
    echo "  - Testez la connexion SSH avant de fermer cette session"
    echo "  - En cas de probl√®me: sudo ufw disable"
    echo "  - Sauvegardez votre IP: sudo ufw allow from <VOTRE_IP>"
}

main "$@"