#!/bin/bash
# Script d'installation monitoring Prometheus + Grafana pour NightScan

set -e

echo "üöÄ Installation monitoring avanc√© NightScan"
echo "============================================="

# V√©rifier pr√©requis
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

# Cr√©er r√©pertoires n√©cessaires
echo "üìÅ Cr√©ation structure r√©pertoires..."
mkdir -p monitoring/grafana/{dashboards,datasources}
mkdir -p monitoring/alertmanager/templates

# V√©rifier fichiers de configuration
echo "üîß V√©rification configuration..."
CONFIG_FILES=(
    "prometheus.yml"
    "alerting_rules.yml"
    "alertmanager.yml"
    "docker-compose.monitoring.yml"
    "grafana/datasources/prometheus.yml"
    "grafana/dashboards/nightscan-overview.json"
)

for file in "${CONFIG_FILES[@]}"; do
    if [[ ! -f "monitoring/$file" ]]; then
        echo "‚ùå Fichier manquant: monitoring/$file"
        exit 1
    fi
done

echo "‚úÖ Tous les fichiers de configuration pr√©sents"

# Configurer permissions Grafana
echo "üîê Configuration permissions Grafana..."
sudo mkdir -p /var/lib/grafana
sudo chown -R 472:472 /var/lib/grafana

# D√©marrer services monitoring
echo "üöÄ D√©marrage services monitoring..."
cd monitoring
docker-compose -f docker-compose.monitoring.yml up -d

# Attendre que les services d√©marrent
echo "‚è≥ Attente d√©marrage services..."
sleep 30

# V√©rifier statut services
echo "üîç V√©rification statut services..."
SERVICES=("prometheus" "grafana" "alertmanager" "node_exporter")

for service in "${SERVICES[@]}"; do
    if docker ps | grep -q "nightscan_$service"; then
        echo "‚úÖ $service d√©marr√©"
    else
        echo "‚ùå $service n'a pas d√©marr√©"
        docker logs "nightscan_$service" | tail -10
    fi
done

# Test connectivity
echo "üåê Test connectivit√© services..."

# Test Prometheus
if curl -s http://localhost:9090/-/healthy > /dev/null; then
    echo "‚úÖ Prometheus accessible sur http://localhost:9090"
else
    echo "‚ùå Prometheus non accessible"
fi

# Test Grafana
if curl -s http://localhost:3000/api/health > /dev/null; then
    echo "‚úÖ Grafana accessible sur http://localhost:3000"
    echo "   Login: admin / nightscan_admin_2025"
else
    echo "‚ùå Grafana non accessible"
fi

# Test Alertmanager
if curl -s http://localhost:9093/-/healthy > /dev/null; then
    echo "‚úÖ Alertmanager accessible sur http://localhost:9093"
else
    echo "‚ùå Alertmanager non accessible"
fi

# Configuration initiale Grafana
echo "üìä Configuration initiale Grafana..."
sleep 10

# Import dashboard automatique
GRAFANA_URL="http://admin:nightscan_admin_2025@localhost:3000"

echo "üìä Import dashboard NightScan..."
curl -X POST \
  "$GRAFANA_URL/api/dashboards/db" \
  -H "Content-Type: application/json" \
  -d @grafana/dashboards/nightscan-overview.json

# Cr√©er utilisateur lecture seule
echo "üë§ Cr√©ation utilisateur monitoring..."
curl -X POST \
  "$GRAFANA_URL/api/admin/users" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Monitoring User",
    "email": "monitoring@nightscan.com",
    "login": "monitoring",
    "password": "monitoring_readonly_2025",
    "role": "Viewer"
  }'

# Configuration alertes email (si SMTP configur√©)
if [[ -n "$SMTP_SERVER" ]]; then
    echo "üìß Configuration alertes email..."
    curl -X POST \
      "$GRAFANA_URL/api/alert-notifications" \
      -H "Content-Type: application/json" \
      -d '{
        "name": "email-notifications",
        "type": "email",
        "settings": {
          "addresses": "devops@nightscan.com"
        }
      }'
fi

echo ""
echo "üéâ Installation monitoring termin√©e!"
echo "======================================"
echo ""
echo "üìä Acc√®s interfaces:"
echo "   Prometheus: http://localhost:9090"
echo "   Grafana:    http://localhost:3000 (admin/nightscan_admin_2025)"
echo "   Alertmanager: http://localhost:9093"
echo ""
echo "üìà M√©triques disponibles:"
echo "   - Services NightScan (web, api, prediction, ml)"
echo "   - Base de donn√©es PostgreSQL"
echo "   - Cache Redis"
echo "   - Syst√®me (CPU, m√©moire, disque)"
echo ""
echo "üö® Alertes configur√©es:"
echo "   - Services down (1min)"
echo "   - Erreurs √©lev√©es (5min)"
echo "   - Performance d√©grad√©e"
echo "   - Ressources syst√®me"
echo ""
echo "üìã Prochaines √©tapes:"
echo "   1. Configurer SMTP pour alertes email"
echo "   2. Personnaliser dashboards Grafana"
echo "   3. Ajuster seuils alertes selon charge"
echo "   4. Ajouter m√©triques business sp√©cifiques"
echo ""

# Cr√©ation script de maintenance
cat > monitoring_maintenance.sh << 'EOF'
#!/bin/bash
# Script maintenance monitoring NightScan

echo "üîß Maintenance monitoring NightScan"

# Nettoyage donn√©es anciennes Prometheus (>30 jours)
docker exec nightscan_prometheus \
  promtool query range 'up' \
  --start=$(date -d '30 days ago' --iso-8601) \
  --end=$(date --iso-8601) \
  --step=1h > /dev/null

# Backup configuration Grafana
docker exec nightscan_grafana \
  tar -czf /var/lib/grafana/backup-$(date +%Y%m%d).tar.gz \
  /etc/grafana /var/lib/grafana/grafana.db

# V√©rification sant√© services
services=("prometheus" "grafana" "alertmanager" "node_exporter")
for service in "${services[@]}"; do
    if ! docker ps | grep -q "nightscan_$service"; then
        echo "‚ö†Ô∏è Red√©marrage $service"
        docker restart "nightscan_$service"
    fi
done

echo "‚úÖ Maintenance termin√©e"
EOF

chmod +x monitoring_maintenance.sh

echo "üìù Script maintenance cr√©√©: monitoring_maintenance.sh"
echo "   Recommand√©: ajouter au cron quotidien"

cd ..
echo "‚úÖ Installation monitoring compl√®te!"