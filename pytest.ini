[tool:pytest]
# Configuration for pytest testing framework

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for ML testing
markers =
    # Core ML testing markers
    ml_unit: ML unit tests for core components
    ml_integration: ML integration tests for full pipeline
    performance_critical: Performance tests with SLA requirements
    load_test: Load and stress testing with high concurrency
    slow: Tests that take longer than 30 seconds
    
    # Integration testing markers
    integration: Integration tests with real services
    auth: Authentication and authorization integration tests
    upload: File upload integration tests
    e2e: End-to-end workflow tests
    
    # Component-specific markers
    model_manager: Tests for ModelManager component
    prediction_router: Tests for PredictionRouter component
    file_detector: Tests for FileTypeDetector component
    api_endpoints: Tests for API endpoints
    
    # Test categories
    unit: Fast unit tests
    accuracy: Model accuracy and regression tests
    memory: Memory usage and leak detection tests
    concurrency: Thread safety and concurrent access tests
    
    # Environment-specific markers
    requires_gpu: Tests that need GPU acceleration
    requires_models: Tests that need actual ML models
    requires_data: Tests that need real data files
    requires_db: Tests that need database connection
    requires_redis: Tests that need Redis connection

# Test output configuration
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    
    # Coverage configuration
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80
    
    # Performance configuration
    --durations=10
    --timeout=300
    
    # Test quality enforcement
    --assert=plain

# Coverage configuration
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */env/*
    */.tox/*
    */migrations/*
    */node_modules/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

# Timeout configuration
timeout = 300
timeout_method = thread

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filtering warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:tensorflow.*
    ignore::UserWarning:torch.*