name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          # Install code quality tools
          pip install black isort mypy ruff bandit safety pre-commit
      
      - name: ✨ Check code formatting with Black
        run: |
          echo "🔍 Checking Python code formatting..."
          black --check --diff --color .
      
      - name: 📚 Check import sorting with isort
        run: |
          echo "🔍 Checking import sorting..."
          isort --check-only --diff --color .
      
      - name: 🔍 Lint with Ruff
        run: |
          echo "🔍 Running Ruff linter..."
          ruff check . --output-format=github
      
      - name: 🏷️ Type checking with MyPy
        run: |
          echo "🔍 Running type checking..."
          mypy . --ignore-missing-imports --show-error-codes
        continue-on-error: true  # Type checking issues shouldn't fail CI initially
      
      - name: 🔒 Security analysis with Bandit
        run: |
          echo "🔒 Running security analysis..."
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
      
      - name: 🛡️ Check dependencies for vulnerabilities
        run: |
          echo "🛡️ Checking dependencies for known vulnerabilities..."
          safety check --json --output safety-report.json || true
          safety check
      
      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  dockerfile-quality:
    name: Dockerfile Security & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
      
      - name: 📊 Upload Dockerfile analysis results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  kubernetes-quality:
    name: Kubernetes Manifests Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: ⚙️ Setup kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
      
      - name: ✅ Validate Kubernetes manifests
        run: |
          echo "✅ Validating Kubernetes manifests..."
          find k8s/ -name '*.yaml' -o -name '*.yml' | xargs kubeval
      
      - name: 🔍 Kubernetes security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'k8s/'
          format: 'sarif'
          output: 'trivy-k8s-results.sarif'
      
      - name: 📊 Upload Kubernetes security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-k8s-results.sarif'

  mobile-quality:
    name: Mobile App Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ios-app
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 📱 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ios-app/package-lock.json
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint || true
      
      - name: ✨ Check code formatting with Prettier
        run: |
          echo "✨ Checking code formatting..."
          npm run format:check || true
      
      - name: 🧪 Run TypeScript compiler
        run: |
          echo "🧪 Running TypeScript compiler..."
          npx tsc --noEmit

  wordpress-quality:
    name: WordPress Plugin Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐘 Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer, phpcs, phpstan
      
      - name: 🔍 PHP CodeSniffer
        run: |
          echo "🔍 Running PHP CodeSniffer..."
          find wp-plugin/ -name '*.php' -exec phpcs --standard=WordPress {} + || true
      
      - name: 🛡️ PHP Security Check
        run: |
          echo "🛡️ Running PHP security analysis..."
          # Basic security checks for WordPress plugins
          grep -r "eval(" wp-plugin/ && echo "⚠️ Found eval() usage" || echo "✅ No eval() usage found"
          grep -r "\$_GET\|\$_POST" wp-plugin/ | grep -v "sanitize\|escape" && echo "⚠️ Found unsanitized input" || echo "✅ Input appears sanitized"
          grep -r "mysql_query\|mysqli_query" wp-plugin/ && echo "⚠️ Found direct SQL queries" || echo "✅ No direct SQL queries found"

  security-comprehensive:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 🕷️ Run GitLab Secret Detection
        uses: secret-scanner/action@v1.4.2
        with:
          path: './'
          output: 'secrets-report.json'
        continue-on-error: true
      
      - name: 📊 Upload secrets scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secrets-scan-report
          path: secrets-report.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dockerfile-quality, kubernetes-quality, mobile-quality, wordpress-quality]
    if: always()
    
    steps:
      - name: 📊 Generate Quality Report
        run: |
          echo "## 📊 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dockerfile Quality | ${{ needs.dockerfile-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Kubernetes Manifests | ${{ needs.kubernetes-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile App Quality | ${{ needs.mobile-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| WordPress Plugins | ${{ needs.wordpress-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View detailed reports in the Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
