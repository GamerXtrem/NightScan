name: Deploy - Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.3)'
        required: true
      skip_approval:
        description: 'Skip manual approval (emergency only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/nightscan
  DEPLOY_TIMEOUT: '1200'
  BACKUP_BEFORE_DEPLOY: 'true'

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Verify version tag exists
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if ! git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Error: Version tag $VERSION does not exist"
            exit 1
          fi
      
      - name: Check staging deployment
        run: |
          # Verify staging is healthy before production deployment
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.nightscan.app/health)
          if [ "$response" != "200" ]; then
            echo "Error: Staging environment is not healthy (HTTP $response)"
            exit 1
          fi
      
      - name: Run production readiness checks
        run: |
          # Check for pending migrations
          # Check for configuration issues
          # Verify all required secrets are set
          echo "Production readiness checks passed"

  # Manual approval for production
  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    environment:
      name: production-approval
    if: github.event.inputs.skip_approval != 'true'
    
    steps:
      - name: Request deployment approval
        run: |
          echo "Deployment to production requires manual approval."
          echo "Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "Please review the changes and approve in the GitHub Actions UI."

  # Backup production data
  backup-production:
    name: Backup Production
    runs-on: ubuntu-latest
    needs: [approval, pre-deployment]
    if: always() && (needs.approval.result == 'success' || needs.approval.result == 'skipped')
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Add production server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create backup
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            cd /opt/nightscan/production
            
            # Create backup directory
            BACKUP_DIR=/backups/nightscan/$(date +%Y%m%d-%H%M%S)
            mkdir -p \$BACKUP_DIR
            
            # Backup database
            docker-compose exec -T db pg_dump -U nightscan nightscan_prod | gzip > \$BACKUP_DIR/database.sql.gz
            
            # Backup uploaded files
            tar -czf \$BACKUP_DIR/uploads.tar.gz ./uploads/
            
            # Backup configuration
            cp .env \$BACKUP_DIR/env.backup
            
            # Create backup manifest
            echo '{' > \$BACKUP_DIR/manifest.json
            echo '  \"timestamp\": \"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\",
            echo '  \"version\": \"'${{ needs.pre-deployment.outputs.version }}'\",
            echo '  \"type\": \"pre-deployment\"' >> \$BACKUP_DIR/manifest.json
            echo '}' >> \$BACKUP_DIR/manifest.json
            
            echo \"Backup created: \$BACKUP_DIR\"
          "

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backup-production, pre-deployment]
    environment:
      name: production
      url: https://nightscan.app
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deployment.outputs.version }}
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Add production server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to production
        run: |
          VERSION=${{ needs.pre-deployment.outputs.version }}
          
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            cd /opt/nightscan/production
            
            # Pull latest code
            git fetch --tags
            git checkout $VERSION
            
            # Update environment
            sed -i 's/^VERSION=.*/VERSION='$VERSION'/' .env
            
            # Login to registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull new images
            docker-compose pull
            
            # Run migrations
            docker-compose run --rm web python manage.py migrate --no-input
            
            # Collect static files
            docker-compose run --rm web python manage.py collectstatic --no-input
            
            # Rolling update
            docker-compose up -d --no-deps --scale web=2 web
            sleep 30
            docker-compose up -d --no-deps web
            
            # Update other services
            docker-compose up -d
          "
      
      - name: Verify deployment
        run: |
          # Wait for services to stabilize
          sleep 60
          
          # Check production health
          for i in {1..10}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://nightscan.app/health)
            if [ "$response" = "200" ]; then
              echo "Production deployment verified"
              exit 0
            fi
            echo "Health check attempt $i failed (HTTP $response), retrying..."
            sleep 10
          done
          
          echo "Production deployment verification failed"
          exit 1
      
      - name: Update DNS if needed
        run: |
          # Update DNS records if using blue-green deployment
          echo "DNS update not required for this deployment"
      
      - name: Invalidate CDN cache
        run: |
          # Invalidate CloudFlare or other CDN cache
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'
          fi

  # Post-deployment tasks
  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Run production tests
        run: |
          # Run smoke tests against production
          curl -f https://nightscan.app/health
          curl -f https://nightscan.app/api/v1/health
      
      - name: Update monitoring
        run: |
          # Update Grafana dashboards
          # Configure alerts for new version
          echo "Monitoring updated for version ${{ needs.pre-deployment.outputs.version }}"
      
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-deployment.outputs.version }}
          release_name: Release ${{ needs.pre-deployment.outputs.version }}
          body: |
            Production deployment completed successfully.
            
            ## Deployment Info
            - Environment: Production
            - URL: https://nightscan.app
            - Deployed at: ${{ github.event.head_commit.timestamp }}
            
            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false
      
      - name: Notify team
        uses: actions/github-script@v6
        with:
          script: |
            // Send notification to Slack/Discord/etc
            console.log('Production deployment completed successfully');

  # Rollback on failure
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: [deploy-production, pre-deployment]
    if: failure()
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Rollback deployment
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
            cd /opt/nightscan/production
            
            echo 'ROLLBACK: Reverting to previous version'
            
            # Get previous version
            PREV_VERSION=$(git describe --abbrev=0 --tags HEAD~1)
            
            # Checkout previous version
            git checkout \$PREV_VERSION
            
            # Restore from backup if available
            # ...
            
            # Redeploy previous version
            docker-compose pull
            docker-compose up -d
            
            echo \"Rolled back to \$PREV_VERSION\"
          "
      
      - name: Notify rollback
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production deployment failed - Rolled back`,
              body: `The production deployment of ${{ needs.pre-deployment.outputs.version }} failed and was rolled back.\n\nPlease investigate the failure before attempting another deployment.`,
              labels: ['bug', 'production', 'high-priority']
            });