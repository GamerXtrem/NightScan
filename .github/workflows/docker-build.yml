name: Docker - Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/nightscan

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    strategy:
      matrix:
        include:
          - image: web
            dockerfile: ./docker/Dockerfile.web
            context: .
          - image: prediction
            dockerfile: ./docker/Dockerfile.prediction
            context: .
          - image: worker
            dockerfile: ./docker/Dockerfile.worker
            context: .
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Also support Docker Hub
      - name: Log into Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKER_HUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.image }}
            ${{ secrets.DOCKER_HUB_USERNAME != '' && format('{0}/nightscan-{1}', secrets.DOCKER_HUB_USERNAME, matrix.image) || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-,suffix=-{{date 'X'}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_images == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        if: github.event_name != 'pull_request'
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          artifact-name: sbom-${{ matrix.image }}.spdx
          output-file: ./sbom-${{ matrix.image }}.spdx
      
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
      
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
          category: 'container-scan-${{ matrix.image }}'

  # Build multi-arch images for edge devices
  build-edge-images:
    name: Build Edge Device Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64,linux/arm/v7
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-edge
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push edge image
        uses: docker/build-push-action@v5
        with:
          context: ./NightScanPi
          file: ./NightScanPi/Dockerfile
          platforms: linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update deployment manifests
  update-manifests:
    name: Update Deployment Manifests
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Kubernetes manifests
        run: |
          # Update image tags in k8s manifests
          for file in k8s/*.yaml; do
            sed -i "s|image: .*nightscan-.*:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-\1:${{ github.sha }}|g" "$file"
          done
      
      - name: Update docker-compose files
        run: |
          # Update image tags in docker-compose files
          for file in docker-compose*.yml; do
            sed -i "s|image: .*nightscan-.*:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-\1:${{ github.sha }}|g" "$file"
          done
      
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'chore: update image tags to ${{ github.sha }}'
          add: '*.yaml *.yml'
          default_author: github_actions