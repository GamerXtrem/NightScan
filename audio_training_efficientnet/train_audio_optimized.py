#!/usr/bin/env python3
"""
Script d'entra√Ænement optimis√© pour NightScan Audio
Utilise toutes les optimisations de performance par d√©faut
"""

import os
import sys
from pathlib import Path
import subprocess
import argparse
import torch

# Ajouter le chemin parent pour les imports
sys.path.append(str(Path(__file__).parent.parent))


def main():
    """Script wrapper pour lancer l'entra√Ænement avec les param√®tres optimis√©s."""
    parser = argparse.ArgumentParser(
        description="Entra√Ænement optimis√© du mod√®le audio NightScan",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  # Entra√Ænement standard optimis√©
  python train_audio_optimized.py --data-dir /chemin/vers/audio_data

  # Entra√Ænement avec pr√©g√©n√©ration des spectrogrammes (recommand√©)
  python train_audio_optimized.py --data-dir /chemin/vers/audio_data --pregenerate

  # Entra√Ænement rapide pour tests
  python train_audio_optimized.py --data-dir /chemin/vers/audio_data --epochs 10 --batch-size 64
        """
    )
    
    # Arguments essentiels
    parser.add_argument('--data-dir', type=str, required=True,
                       help="R√©pertoire contenant les fichiers audio")
    parser.add_argument('--csv-dir', type=str, default='data/processed/csv',
                       help="R√©pertoire contenant les CSV (d√©faut: data/processed/csv)")
    parser.add_argument('--output-dir', type=str, default='audio_training_efficientnet/models',
                       help="R√©pertoire de sortie pour le mod√®le")
    
    # Param√®tres d'entra√Ænement
    parser.add_argument('--epochs', type=int, default=50,
                       help="Nombre d'epochs (d√©faut: 50)")
    parser.add_argument('--batch-size', type=int, default=None,
                       help="Taille du batch (auto-d√©tect√© si non sp√©cifi√©)")
    parser.add_argument('--learning-rate', type=float, default=0.001,
                       help="Learning rate (d√©faut: 0.001)")
    
    # Options d'optimisation
    parser.add_argument('--pregenerate', action='store_true',
                       help="Pr√©g√©n√©rer tous les spectrogrammes avant l'entra√Ænement (recommand√©)")
    parser.add_argument('--no-optimization', action='store_true',
                       help="D√©sactiver toutes les optimisations (pour comparaison)")
    parser.add_argument('--num-workers', type=int, default=None,
                       help="Nombre de workers (auto-d√©tect√© si non sp√©cifi√©)")
    
    args = parser.parse_args()
    
    # Auto-d√©tecter les param√®tres optimaux
    if args.num_workers is None:
        # Utiliser le nombre de CPU - 2, avec un minimum de 4 et maximum de 16
        import multiprocessing
        cpu_count = multiprocessing.cpu_count()
        args.num_workers = min(max(4, cpu_count - 2), 16)
        print(f"Nombre de workers auto-d√©tect√©: {args.num_workers}")
    
    if args.batch_size is None:
        # Auto-d√©tecter la taille de batch selon la m√©moire GPU
        if torch.cuda.is_available():
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            if gpu_memory >= 16:
                args.batch_size = 64
            elif gpu_memory >= 8:
                args.batch_size = 32
            else:
                args.batch_size = 16
            print(f"Batch size auto-d√©tect√©: {args.batch_size} (GPU: {gpu_memory:.1f} GB)")
        else:
            args.batch_size = 32
            print(f"Batch size par d√©faut: {args.batch_size} (pas de GPU)")
    
    # Construire la commande d'entra√Ænement
    cmd = [
        sys.executable,
        "train_audio.py",
        "--data-dir", args.data_dir,
        "--csv-dir", args.csv_dir,
        "--output-dir", args.output_dir,
        "--epochs", str(args.epochs),
        "--batch-size", str(args.batch_size),
        "--learning-rate", str(args.learning_rate),
        "--num-workers", str(args.num_workers),
    ]
    
    # Ajouter les optimisations par d√©faut
    if not args.no_optimization:
        # R√©pertoire de cache pour les spectrogrammes
        spectrogram_cache = Path("data/spectrograms_cache")
        cmd.extend(["--spectrogram-dir", str(spectrogram_cache)])
        
        # Activer la pr√©g√©n√©ration si demand√©
        if args.pregenerate:
            cmd.append("--pregenerate-spectrograms")
        
        # Utiliser les workers persistants
        cmd.append("--persistent-workers")
        
        # Prefetch factor optimis√©
        cmd.extend(["--prefetch-factor", "4"])
        
        print("\nüöÄ Optimisations activ√©es:")
        print(f"  - Mixed Precision Training (AMP)")
        print(f"  - Workers persistants: {args.num_workers}")
        print(f"  - Prefetch factor: 4")
        print(f"  - Cache spectrogrammes: {spectrogram_cache}")
        if args.pregenerate:
            print(f"  - Pr√©g√©n√©ration des spectrogrammes")
    else:
        cmd.append("--no-amp")
        cmd.extend(["--num-workers", "4"])
        print("\n‚ö†Ô∏è  Mode sans optimisation (pour comparaison)")
    
    print(f"\nüìä Configuration:")
    print(f"  - Batch size: {args.batch_size}")
    print(f"  - Learning rate: {args.learning_rate}")
    print(f"  - Epochs: {args.epochs}")
    
    # Afficher des conseils
    print("\nüí° Conseils pour acc√©l√©rer encore plus l'entra√Ænement:")
    if not args.pregenerate:
        print("  - Utilisez --pregenerate pour pr√©g√©n√©rer les spectrogrammes (gain ~2-3x)")
    if args.batch_size < 64 and torch.cuda.is_available():
        print(f"  - Essayez un batch size plus grand (ex: --batch-size 64)")
    if args.num_workers < 8:
        print(f"  - Augmentez le nombre de workers si vous avez plus de CPU")
    
    # Ex√©cuter la commande
    print(f"\nüéØ Lancement de l'entra√Ænement...")
    print(f"Commande: {' '.join(cmd)}\n")
    
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erreur lors de l'entra√Ænement: {e}")
        return 1
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Entra√Ænement interrompu par l'utilisateur")
        return 1
    
    print(f"\n‚úÖ Entra√Ænement termin√© avec succ√®s!")
    print(f"Mod√®le sauvegard√© dans: {args.output_dir}")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())