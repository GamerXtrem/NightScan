#!/usr/bin/env python3
"""
Script de pr√©paration des donn√©es audio pour NightScan
Scanne les dossiers d'audio et cr√©e les fichiers CSV pour l'entra√Ænement
"""

import os
import sys
from pathlib import Path
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import argparse
import json
from typing import List, Tuple, Dict
import logging

# Importer le module de segmentation
from audio_segmentation import AudioSegmenter

logger = logging.getLogger(__name__)

def scan_audio_directory(audio_dir: Path) -> Dict[str, List[Path]]:
    """
    Scanne le r√©pertoire audio et retourne un dictionnaire {classe: [fichiers]}.
    
    Args:
        audio_dir: R√©pertoire contenant les sous-dossiers de classes
        
    Returns:
        Dict mapping classe -> liste de fichiers WAV
    """
    class_files = {}
    
    # Scanner chaque sous-dossier
    for class_dir in audio_dir.iterdir():
        if not class_dir.is_dir():
            continue
            
        class_name = class_dir.name
        
        # Ignorer les dossiers cach√©s
        if class_name.startswith('.'):
            continue
            
        # Collecter tous les fichiers WAV dans ce dossier
        wav_files = list(class_dir.rglob('*.wav'))
        
        # Filtrer les fichiers cach√©s macOS (commen√ßant par ._)
        wav_files = [f for f in wav_files if not f.name.startswith('._')]
        
        if wav_files:
            # Limiter √† 500 fichiers maximum par classe
            if len(wav_files) > 500:
                # √âchantillonner al√©atoirement 500 fichiers
                import random
                random.seed(42)  # Pour la reproductibilit√©
                wav_files = random.sample(wav_files, 500)
                print(f"Classe '{class_name}': {len(wav_files)} fichiers WAV s√©lectionn√©s (limit√© √† 500)")
            else:
                print(f"Classe '{class_name}': {len(wav_files)} fichiers WAV trouv√©s")
            
            class_files[class_name] = wav_files
    
    return class_files

def create_dataset_splits(class_files: Dict[str, List[Path]], 
                         train_ratio: float = 0.7,
                         val_ratio: float = 0.15,
                         test_ratio: float = 0.15,
                         random_state: int = 42) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """
    Cr√©e les splits train/val/test avec stratification par classe.
    
    Args:
        class_files: Dictionnaire {classe: [fichiers]}
        train_ratio: Proportion pour l'entra√Ænement
        val_ratio: Proportion pour la validation
        test_ratio: Proportion pour le test
        random_state: Seed pour la reproductibilit√©
        
    Returns:
        Tuple de DataFrames (train, val, test)
    """
    all_files = []
    all_labels = []
    
    # Rassembler tous les fichiers et labels
    for class_name, files in class_files.items():
        for file_path in files:
            all_files.append(str(file_path))
            all_labels.append(class_name)
    
    # Cr√©er un DataFrame
    df = pd.DataFrame({
        'filename': all_files,
        'label': all_labels
    })
    
    # Premier split: train+val vs test
    train_val_df, test_df = train_test_split(
        df, 
        test_size=test_ratio,
        stratify=df['label'],
        random_state=random_state
    )
    
    # Second split: train vs val
    val_size = val_ratio / (train_ratio + val_ratio)
    train_df, val_df = train_test_split(
        train_val_df,
        test_size=val_size,
        stratify=train_val_df['label'],
        random_state=random_state
    )
    
    print(f"\nSplits cr√©√©s:")
    print(f"- Train: {len(train_df)} √©chantillons")
    print(f"- Val: {len(val_df)} √©chantillons")
    print(f"- Test: {len(test_df)} √©chantillons")
    
    # Afficher la distribution par classe
    print("\nDistribution par classe:")
    for split_name, split_df in [("Train", train_df), ("Val", val_df), ("Test", test_df)]:
        print(f"\n{split_name}:")
        print(split_df['label'].value_counts().to_string())
    
    return train_df, val_df, test_df

def save_datasets(train_df: pd.DataFrame, 
                  val_df: pd.DataFrame, 
                  test_df: pd.DataFrame,
                  output_dir: Path,
                  relative_to: Path = None):
    """
    Sauvegarde les datasets en CSV.
    
    Args:
        train_df, val_df, test_df: DataFrames √† sauvegarder
        output_dir: R√©pertoire de sortie pour les CSV
        relative_to: Si fourni, les chemins seront relatifs √† ce r√©pertoire
    """
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Convertir les chemins en relatifs si demand√©
    if relative_to:
        for df in [train_df, val_df, test_df]:
            df['filename'] = df['filename'].apply(
                lambda p: str(Path(p).relative_to(relative_to))
            )
    
    # Sauvegarder les CSV
    train_df.to_csv(output_dir / 'train.csv', index=False)
    val_df.to_csv(output_dir / 'val.csv', index=False)
    test_df.to_csv(output_dir / 'test.csv', index=False)
    
    print(f"\nFichiers CSV sauvegard√©s dans: {output_dir}")

def save_class_names(class_names: List[str], output_path: Path):
    """
    Sauvegarde la liste des classes dans un fichier JSON.
    
    Args:
        class_names: Liste des noms de classes
        output_path: Chemin du fichier JSON de sortie
    """
    class_info = {
        'num_classes': len(class_names),
        'class_names': sorted(class_names),
        'class_to_idx': {name: idx for idx, name in enumerate(sorted(class_names))}
    }
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(class_info, f, indent=2, ensure_ascii=False)
    
    print(f"\nInformations sur les classes sauvegard√©es dans: {output_path}")

def main():
    parser = argparse.ArgumentParser(
        description="Pr√©pare les donn√©es audio pour l'entra√Ænement NightScan"
    )
    parser.add_argument(
        'audio_dir',
        type=Path,
        help="R√©pertoire contenant les sous-dossiers de classes audio"
    )
    parser.add_argument(
        '--output-dir',
        type=Path,
        default=Path('data/processed/csv'),
        help="R√©pertoire de sortie pour les CSV (d√©faut: data/processed/csv)"
    )
    parser.add_argument(
        '--train-ratio',
        type=float,
        default=0.7,
        help="Proportion pour l'entra√Ænement (d√©faut: 0.7)"
    )
    parser.add_argument(
        '--val-ratio',
        type=float,
        default=0.15,
        help="Proportion pour la validation (d√©faut: 0.15)"
    )
    parser.add_argument(
        '--test-ratio',
        type=float,
        default=0.15,
        help="Proportion pour le test (d√©faut: 0.15)"
    )
    parser.add_argument(
        '--relative-paths',
        action='store_true',
        help="Utiliser des chemins relatifs dans les CSV"
    )
    parser.add_argument(
        '--min-samples',
        type=int,
        default=10,
        help="Nombre minimum d'√©chantillons par classe (d√©faut: 10)"
    )
    
    # Nouveaux arguments pour la segmentation
    parser.add_argument(
        '--segment',
        action='store_true',
        help="Segmenter les fichiers audio longs avant la pr√©paration"
    )
    parser.add_argument(
        '--segment-duration',
        type=float,
        default=8.0,
        help="Dur√©e des segments en secondes (d√©faut: 8)"
    )
    parser.add_argument(
        '--segment-overlap',
        type=float,
        default=2.0,
        help="Chevauchement entre segments en secondes (d√©faut: 2)"
    )
    parser.add_argument(
        '--segment-dir',
        type=Path,
        default=None,
        help="R√©pertoire pour les fichiers segment√©s (d√©faut: audio_dir_segmented)"
    )
    
    args = parser.parse_args()
    
    # Configurer le logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # V√©rifier que le r√©pertoire existe
    if not args.audio_dir.exists():
        print(f"Erreur: Le r√©pertoire {args.audio_dir} n'existe pas!")
        return 1
    
    # G√©rer la segmentation si demand√©e
    working_dir = args.audio_dir
    
    if args.segment:
        print(f"\nüî™ Segmentation des fichiers audio longs...")
        
        # D√©terminer le r√©pertoire de sortie pour les segments
        if args.segment_dir is None:
            segment_dir = args.audio_dir.parent / f"{args.audio_dir.name}_segmented"
        else:
            segment_dir = args.segment_dir
        
        # Cr√©er le segmenteur
        segmenter = AudioSegmenter(
            segment_duration=args.segment_duration,
            overlap=args.segment_overlap,
            min_segment_duration=3.0
        )
        
        # Segmenter les fichiers
        segments_info = segmenter.segment_directory(
            args.audio_dir,
            segment_dir,
            preserve_structure=True
        )
        
        if not segments_info:
            print("Aucun fichier n'a √©t√© segment√© (tous les fichiers sont d√©j√† courts)")
        else:
            print(f"‚úÖ Segmentation termin√©e. Segments cr√©√©s dans: {segment_dir}")
            working_dir = segment_dir
    
    # Scanner le r√©pertoire (original ou segment√©)
    print(f"\nScan du r√©pertoire: {working_dir}")
    class_files = scan_audio_directory(working_dir)
    
    if not class_files:
        print("Erreur: Aucune classe trouv√©e!")
        return 1
    
    # Filtrer les classes avec trop peu d'√©chantillons
    filtered_classes = {}
    for class_name, files in class_files.items():
        if len(files) >= args.min_samples:
            filtered_classes[class_name] = files
        else:
            print(f"‚ö†Ô∏è  Classe '{class_name}' ignor√©e (seulement {len(files)} √©chantillons, minimum requis: {args.min_samples})")
    
    if not filtered_classes:
        print("Erreur: Aucune classe n'a assez d'√©chantillons!")
        return 1
    
    print(f"\n{len(filtered_classes)} classes retenues pour l'entra√Ænement")
    
    # Cr√©er les splits
    train_df, val_df, test_df = create_dataset_splits(
        filtered_classes,
        train_ratio=args.train_ratio,
        val_ratio=args.val_ratio,
        test_ratio=args.test_ratio
    )
    
    # Sauvegarder les CSV
    relative_to = working_dir if args.relative_paths else None
    save_datasets(train_df, val_df, test_df, args.output_dir, relative_to)
    
    # Sauvegarder les informations sur les classes
    class_names = list(filtered_classes.keys())
    save_class_names(class_names, args.output_dir / 'classes.json')
    
    print("\n‚úÖ Pr√©paration des donn√©es termin√©e!")
    print(f"Classes d√©tect√©es: {', '.join(sorted(class_names))}")
    
    if args.segment and segments_info:
        print(f"\nüí° Conseil: Utilisez le r√©pertoire segment√© pour l'entra√Ænement:")
        print(f"   python train_audio.py --data-dir {segment_dir}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())