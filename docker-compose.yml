version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: nightscan
      POSTGRES_USER: nightscan
      POSTGRES_PASSWORD: ${DB_PASSWORD:-nightscan_secret}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - nightscan
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nightscan"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secret}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nightscan
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prediction API Server
  prediction-api:
    build:
      context: .
      target: prediction-api
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
      - TORCH_DEVICE=${TORCH_DEVICE:-cpu}
      - MODEL_PATH=/app/models/wildlife_model.pth
      - LABELS_PATH=/app/models/labels.json
    volumes:
      - ./models:/app/models:ro
      - ./Audio_Training:/app/Audio_Training:ro
    ports:
      - "8001:8001"
    networks:
      - nightscan
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Web Application
  web:
    build:
      context: .
      target: production
    environment:
      - NIGHTSCAN_ENV=production
      - DATABASE_URL=postgresql://nightscan:${DB_PASSWORD:-nightscan_secret}@postgres:5432/nightscan
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secret}@redis:6379/0
      - PREDICT_API_URL=http://prediction-api:8001/api/predict
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY:-your-csrf-secret-key}
      - WEBSOCKET_URL=ws://web:8000
    volumes:
      - upload_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "8000:8000"
    networks:
      - nightscan
    depends_on:
      - postgres
      - redis
      - prediction-api
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - upload_data:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nightscan
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - nightscan
    depends_on:
      - web

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - nightscan
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  upload_data:
  logs_data:
  prometheus_data:
  grafana_data:

networks:
  nightscan:
    driver: bridge