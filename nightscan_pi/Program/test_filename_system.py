#!/usr/bin/env python3
"""
Test du syst√®me de nommage des fichiers NightScan
V√©rifie la g√©n√©ration, le parsing et la compatibilit√©
"""

import os
import sys
import logging
import tempfile
from datetime import datetime
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

from .filename_utils import FilenameGenerator, FilenameParser, create_audio_filename, create_image_filename
from .location_manager import LocationManager

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class FilenameSystemTester:
    """Testeur complet du syst√®me de nommage"""
    
    def __init__(self):
        self.results = []
        self.location_manager = LocationManager()
    
    def test_filename_generation(self):
        """Test de g√©n√©ration de noms de fichiers"""
        logger.info("üß™ Test de g√©n√©ration de noms de fichiers")
        
        # Test avec location manager
        generator = FilenameGenerator(self.location_manager)
        
        # Test audio
        audio_name = generator.generate_audio_filename()
        logger.info(f"Audio g√©n√©r√©: {audio_name}")
        
        # Test image
        image_name = generator.generate_image_filename()
        logger.info(f"Image g√©n√©r√©: {image_name}")
        
        # Test avec coordonn√©es personnalis√©es
        custom_audio = generator.generate_audio_filename(
            latitude=47.3769,
            longitude=8.5417
        )
        logger.info(f"Audio personnalis√©: {custom_audio}")
        
        # V√©rifier le format
        self.results.append(("Audio format", audio_name.startswith("AUD_")))
        self.results.append(("Image format", image_name.startswith("IMG_")))
        self.results.append(("Extension audio", audio_name.endswith(".wav")))
        self.results.append(("Extension image", image_name.endswith(".jpg")))
        
        return True
    
    def test_filename_parsing(self):
        """Test de parsing de noms de fichiers"""
        logger.info("üß™ Test de parsing de noms de fichiers")
        
        parser = FilenameParser()
        
        # Test du nouveau format
        test_files = [
            "AUD_20240109_143045_4695_0745.wav",
            "IMG_20240109_143045_4695_0745.jpg",
            "VID_20240109_143045_4695_0745.mp4",
            # Format invalide
            "invalid_file.txt"
        ]
        
        for filename in test_files:
            parsed = parser.parse_filename(filename)
            logger.info(f"Fichier: {filename}")
            logger.info(f"  Type: {parsed['type']}")
            logger.info(f"  Format: {parsed['format']}")
            logger.info(f"  Timestamp: {parsed['timestamp']}")
            logger.info(f"  GPS: {parsed['latitude']}, {parsed['longitude']}")
            
            # V√©rifications
            if filename.startswith("AUD_"):
                self.results.append((f"Parse nouveau audio {filename}", parsed['type'] == 'audio'))
            elif filename.startswith("IMG_"):
                self.results.append((f"Parse nouveau image {filename}", parsed['type'] == 'image'))
            elif filename.startswith("VID_"):
                self.results.append((f"Parse nouveau video {filename}", parsed['type'] == 'video'))
        
        return True
    
    def test_coordinate_encoding(self):
        """Test d'encodage/d√©codage des coordonn√©es"""
        logger.info("üß™ Test d'encodage/d√©codage des coordonn√©es")
        
        generator = FilenameGenerator()
        
        # Test de coordonn√©es connues
        test_coords = [
            (46.9480, 7.4474),  # Zurich
            (47.3769, 8.5417),  # Zurich Nord
            (45.5017, 6.0863),  # Chamonix
            (0.0, 0.0),         # √âquateur/Greenwich
            (-33.8688, 151.2093),  # Sydney
            (90.0, 180.0),      # P√¥le Nord, longitude max
            (-90.0, -180.0)     # P√¥le Sud, longitude min
        ]
        
        for lat, lon in test_coords:
            # G√©n√©rer un nom avec ces coordonn√©es
            filename = generator.generate_filename('audio', 'wav', latitude=lat, longitude=lon)
            logger.info(f"Coordonn√©es ({lat}, {lon}) -> {filename}")
            
            # Parser et v√©rifier
            parsed = FilenameParser.parse_filename(filename)
            parsed_lat = parsed['latitude']
            parsed_lon = parsed['longitude']
            
            if parsed_lat is not None and parsed_lon is not None:
                lat_diff = abs(lat - parsed_lat)
                lon_diff = abs(lon - parsed_lon)
                
                # Tol√©rance de 0.1 degr√©s (environ 10km)
                lat_ok = lat_diff < 0.1
                lon_ok = lon_diff < 0.1
                
                logger.info(f"  D√©cod√©: ({parsed_lat}, {parsed_lon})")
                logger.info(f"  Diff√©rence: ({lat_diff:.4f}, {lon_diff:.4f})")
                logger.info(f"  Pr√©cision: {'‚úÖ' if lat_ok and lon_ok else '‚ùå'}")
                
                self.results.append((f"Coordonn√©es {lat},{lon}", lat_ok and lon_ok))
            else:
                logger.warning(f"  √âchec du d√©codage")
                self.results.append((f"Coordonn√©es {lat},{lon}", False))
        
        return True
    
    def test_compatibility_functions(self):
        """Test des fonctions de compatibilit√©"""
        logger.info("üß™ Test des fonctions de compatibilit√©")
        
        # Test des fonctions utilitaires
        audio_name = create_audio_filename()
        image_name = create_image_filename()
        
        logger.info(f"Fonction utilitaire audio: {audio_name}")
        logger.info(f"Fonction utilitaire image: {image_name}")
        
        self.results.append(("Fonction audio", audio_name.startswith("AUD_")))
        self.results.append(("Fonction image", image_name.startswith("IMG_")))
        
        return True
    
    def test_location_integration(self):
        """Test d'int√©gration avec le syst√®me de localisation"""
        logger.info("üß™ Test d'int√©gration avec le syst√®me de localisation")
        
        try:
            # Test avec location manager
            generator = FilenameGenerator(self.location_manager)
            
            # G√©n√©rer des noms avec la localisation actuelle
            audio_name = generator.generate_audio_filename()
            image_name = generator.generate_image_filename()
            
            logger.info(f"Audio avec localisation: {audio_name}")
            logger.info(f"Image avec localisation: {image_name}")
            
            # V√©rifier que les coordonn√©es sont int√©gr√©es
            parsed_audio = FilenameParser.parse_filename(audio_name)
            parsed_image = FilenameParser.parse_filename(image_name)
            
            has_gps_audio = parsed_audio['latitude'] is not None and parsed_audio['longitude'] is not None
            has_gps_image = parsed_image['latitude'] is not None and parsed_image['longitude'] is not None
            
            self.results.append(("GPS int√©gr√© audio", has_gps_audio))
            self.results.append(("GPS int√©gr√© image", has_gps_image))
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur d'int√©gration localisation: {e}")
            self.results.append(("Int√©gration localisation", False))
            return False
    
    def test_file_operations(self):
        """Test avec de vrais fichiers"""
        logger.info("üß™ Test avec op√©rations fichiers")
        
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_path = Path(temp_dir)
                
                # Cr√©er des fichiers avec nouveaux noms
                generator = FilenameGenerator(self.location_manager)
                
                audio_filename = generator.generate_audio_filename()
                image_filename = generator.generate_image_filename()
                
                audio_path = temp_path / audio_filename
                image_path = temp_path / image_filename
                
                # Cr√©er des fichiers factices
                audio_path.write_text("fake audio content")
                image_path.write_text("fake image content")
                
                # V√©rifier que les fichiers existent
                audio_exists = audio_path.exists()
                image_exists = image_path.exists()
                
                logger.info(f"Fichier audio cr√©√©: {audio_exists}")
                logger.info(f"Fichier image cr√©√©: {image_exists}")
                
                # Lister les fichiers et les parser
                for file_path in temp_path.iterdir():
                    parsed = FilenameParser.parse_filename(file_path.name)
                    logger.info(f"Fichier: {file_path.name} -> Type: {parsed['type']}")
                
                self.results.append(("Cr√©ation fichier audio", audio_exists))
                self.results.append(("Cr√©ation fichier image", image_exists))
                
                return True
                
        except Exception as e:
            logger.error(f"Erreur test fichiers: {e}")
            self.results.append(("Test fichiers", False))
            return False
    
    def run_all_tests(self):
        """Ex√©cute tous les tests"""
        logger.info("üöÄ D√©marrage des tests du syst√®me de nommage")
        
        tests = [
            ("G√©n√©ration de noms", self.test_filename_generation),
            ("Parsing de noms", self.test_filename_parsing),
            ("Encodage coordonn√©es", self.test_coordinate_encoding),
            ("Fonctions compatibilit√©", self.test_compatibility_functions),
            ("Int√©gration localisation", self.test_location_integration),
            ("Op√©rations fichiers", self.test_file_operations)
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            try:
                logger.info(f"\n{'='*50}")
                logger.info(f"Test: {test_name}")
                logger.info(f"{'='*50}")
                
                result = test_func()
                if result:
                    logger.info(f"‚úÖ {test_name} PASS√â")
                    passed += 1
                else:
                    logger.error(f"‚ùå {test_name} √âCHOU√â")
                    failed += 1
                    
            except Exception as e:
                logger.error(f"‚ùå {test_name} ERREUR: {e}")
                failed += 1
        
        # R√©sum√© des r√©sultats d√©taill√©s
        logger.info(f"\n{'='*50}")
        logger.info("R√âSULTATS D√âTAILL√âS")
        logger.info(f"{'='*50}")
        
        detail_passed = 0
        detail_failed = 0
        
        for test_name, result in self.results:
            status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
            logger.info(f"{test_name}: {status}")
            
            if result:
                detail_passed += 1
            else:
                detail_failed += 1
        
        # R√©sum√© final
        logger.info(f"\n{'='*50}")
        logger.info("R√âSUM√â FINAL")
        logger.info(f"{'='*50}")
        logger.info(f"Tests g√©n√©raux: {passed} pass√©s, {failed} √©chou√©s")
        logger.info(f"Tests d√©taill√©s: {detail_passed} pass√©s, {detail_failed} √©chou√©s")
        
        overall_success = failed == 0 and detail_failed == 0
        
        if overall_success:
            logger.info("üéâ TOUS LES TESTS SONT PASS√âS!")
        else:
            logger.error("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        
        return overall_success
    
    def generate_test_report(self):
        """G√©n√®re un rapport de test"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'results': self.results,
            'summary': {
                'total_tests': len(self.results),
                'passed': sum(1 for _, result in self.results if result),
                'failed': sum(1 for _, result in self.results if not result)
            }
        }
        
        return report


def main():
    """Fonction principale"""
    print("üß™ Test du Syst√®me de Nommage des Fichiers NightScan")
    print("="*60)
    
    tester = FilenameSystemTester()
    success = tester.run_all_tests()
    
    # G√©n√©rer le rapport
    report = tester.generate_test_report()
    
    # Sauvegarder le rapport
    try:
        report_path = Path("filename_test_report.json")
        import json
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)
        print(f"\nüìÑ Rapport sauvegard√©: {report_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur sauvegarde rapport: {e}")
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())