#!/usr/bin/env python3
"""
Test de l'interface web apr√®s changements EfficientNet
"""

import os
import sys
import tempfile
import threading
import time
import requests
from pathlib import Path
import json

def test_web_app_startup():
    """Test si l'application web d√©marre sans erreur."""
    print("üåê Test de d√©marrage de l'application web")
    print("=" * 50)
    
    try:
        # Import the web app
        sys.path.append(str(Path(__file__).parent / "web"))
        from web.app import app
        
        # Test que l'app peut √™tre import√©e
        print("‚úÖ Application Flask import√©e avec succ√®s")
        
        # Test que les routes de base existent
        routes = [rule.rule for rule in app.url_map.iter_rules()]
        expected_routes = ['/', '/login', '/register', '/dashboard']
        
        for route in expected_routes:
            if route in routes:
                print(f"‚úÖ Route trouv√©e: {route}")
            else:
                print(f"‚ùå Route manquante: {route}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage: {e}")
        return False

def test_predict_api_integration():
    """Test si l'int√©gration avec l'API de pr√©diction fonctionne."""
    print("\\nüîå Test d'int√©gration API de pr√©diction")
    print("=" * 50)
    
    try:
        # Check if prediction API URL is correctly configured
        from web.app import PREDICT_API_URL
        print(f"‚úÖ URL API configur√©e: {PREDICT_API_URL}")
        
        # Test if unified prediction system exists
        unified_api_path = Path("unified_prediction_system/unified_prediction_api.py")
        if unified_api_path.exists():
            print("‚úÖ API de pr√©diction unifi√©e trouv√©e")
        else:
            print("‚ùå API de pr√©diction unifi√©e manquante")
        
        # Test model registry integration
        try:
            from model_registry import get_model_registry
            registry = get_model_registry()
            stats = registry.get_registry_stats()
            print(f"‚úÖ Registre de mod√®les accessible: {stats['total_models']} mod√®les")
            
            # Check if all model files exist
            models_exist = True
            for model_id, model_info in registry.models.items():
                model_path = Path(model_info.file_path)
                if model_path.exists():
                    print(f"‚úÖ Mod√®le {model_id}: {model_path}")
                else:
                    print(f"‚ùå Mod√®le manquant {model_id}: {model_path}")
                    models_exist = False
            
            return models_exist
            
        except Exception as e:
            print(f"‚ùå Erreur registre de mod√®les: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur test API: {e}")
        return False

def test_file_upload_compatibility():
    """Test si le syst√®me de t√©l√©chargement fonctionne avec nos nouveaux mod√®les."""
    print("\\nüì§ Test de compatibilit√© upload de fichiers")
    print("=" * 50)
    
    try:
        # Test que les extensions de fichiers sont correctes
        from web.app import app
        
        # Check if file processing still works
        print("‚úÖ Configuration d'upload accessible")
        
        # Test supported file types for our new models
        audio_extensions = ['.wav', '.mp3', '.npy']  # Audio spectrograms
        image_extensions = ['.jpg', '.jpeg', '.png']  # Wildlife photos
        
        print("‚úÖ Extensions audio support√©es:", audio_extensions)
        print("‚úÖ Extensions image support√©es:", image_extensions)
        
        # Test that celery tasks still exist
        try:
            from web.tasks import run_prediction
            print("‚úÖ T√¢che Celery de pr√©diction trouv√©e")
        except ImportError:
            print("‚ùå T√¢che Celery de pr√©diction manquante")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test upload: {e}")
        return False

def test_database_models():
    """Test si les mod√®les de base de donn√©es fonctionnent toujours."""
    print("\\nüóÑÔ∏è Test des mod√®les de base de donn√©es")
    print("=" * 50)
    
    try:
        from web.app import User, Prediction, db
        
        # Test que les mod√®les peuvent √™tre import√©s
        print("‚úÖ Mod√®les User et Prediction import√©s")
        
        # Test que les relations fonctionnent
        print("‚úÖ Relations de base de donn√©es configur√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mod√®les DB: {e}")
        return False

def generate_web_test_report():
    """G√©n√®re un rapport de test de l'interface web."""
    print("\\nüìä G√©n√©ration du rapport de test web")
    print("=" * 50)
    
    tests = {
        'web_app_startup': test_web_app_startup(),
        'predict_api_integration': test_predict_api_integration(),
        'file_upload_compatibility': test_file_upload_compatibility(),
        'database_models': test_database_models()
    }
    
    report = {
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
        'test_results': tests,
        'summary': {
            'total_tests': len(tests),
            'passed': sum(1 for result in tests.values() if result),
            'failed': sum(1 for result in tests.values() if not result)
        },
        'recommendations': []
    }
    
    # Add recommendations based on failures
    if not tests['web_app_startup']:
        report['recommendations'].append("L'application web a des probl√®mes de d√©marrage - v√©rifier les d√©pendances")
    
    if not tests['predict_api_integration']:
        report['recommendations'].append("L'API de pr√©diction n'est pas correctement int√©gr√©e - v√©rifier les chemins des mod√®les")
    
    if not tests['file_upload_compatibility']:
        report['recommendations'].append("Le syst√®me d'upload a des probl√®mes - v√©rifier les t√¢ches Celery")
    
    if all(tests.values()):
        report['recommendations'].append("‚úÖ Tous les tests passent - l'interface web est compatible avec EfficientNet")
    
    # Save report
    report_path = Path('web_interface_test_report.json')
    with open(report_path, 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"‚úÖ Rapport sauvegard√©: {report_path}")
    
    # Display summary
    print(f"\\nüéØ R√âSUM√â: {report['summary']['passed']}/{report['summary']['total_tests']} tests r√©ussis")
    
    for rec in report['recommendations']:
        print(f"üí° {rec}")
    
    return report

def main():
    """Fonction principale de test."""
    print("üåô NightScan - Test Interface Web apr√®s EfficientNet")
    print("=" * 60)
    
    report = generate_web_test_report()
    
    return 0 if report['summary']['failed'] == 0 else 1

if __name__ == "__main__":
    sys.exit(main())